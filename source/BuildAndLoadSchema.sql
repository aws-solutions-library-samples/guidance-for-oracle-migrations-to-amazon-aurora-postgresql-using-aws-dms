-- Build The Whole Schema along with Procedures for Data Load
-- Step 1: Resize Redo Logs

BEGIN
    -- Step 1: Add new redo log files with size 2G
    rdsadmin.rdsadmin_util.add_logfile(p_size => '2G');
    rdsadmin.rdsadmin_util.add_logfile(p_size => '2G');
    rdsadmin.rdsadmin_util.add_logfile(p_size => '2G');
    rdsadmin.rdsadmin_util.add_logfile(p_size => '2G');

    -- Step 2: Loop to switch logs and drop inactive log groups
    DECLARE
        v_status_count NUMBER := 0;
        v_group1_dropped BOOLEAN := FALSE;
        v_group2_dropped BOOLEAN := FALSE;
        v_group3_dropped BOOLEAN := FALSE;
        v_group4_dropped BOOLEAN := FALSE;
    BEGIN
        WHILE NOT (v_group1_dropped AND v_group2_dropped AND v_group3_dropped AND v_group4_dropped) LOOP
            -- Switch logs to make log groups inactive
            rdsadmin.rdsadmin_util.switch_logfile;

            -- Check and drop each log group if it is inactive
            IF NOT v_group1_dropped THEN
                SELECT COUNT(*)
                INTO v_status_count
                FROM V$LOG
                WHERE GROUP# = 1 AND STATUS = 'INACTIVE';

                IF v_status_count > 0 THEN
                    rdsadmin.rdsadmin_util.drop_logfile(grp => 1);
                    v_group1_dropped := TRUE;
                END IF;
            END IF;

            IF NOT v_group2_dropped THEN
                SELECT COUNT(*)
                INTO v_status_count
                FROM V$LOG
                WHERE GROUP# = 2 AND STATUS = 'INACTIVE';

                IF v_status_count > 0 THEN
                    rdsadmin.rdsadmin_util.drop_logfile(grp => 2);
                    v_group2_dropped := TRUE;
                END IF;
            END IF;

            IF NOT v_group3_dropped THEN
                SELECT COUNT(*)
                INTO v_status_count
                FROM V$LOG
                WHERE GROUP# = 3 AND STATUS = 'INACTIVE';

                IF v_status_count > 0 THEN
                    rdsadmin.rdsadmin_util.drop_logfile(grp => 3);
                    v_group3_dropped := TRUE;
                END IF;
            END IF;

            IF NOT v_group4_dropped THEN
                SELECT COUNT(*)
                INTO v_status_count
                FROM V$LOG
                WHERE GROUP# = 4 AND STATUS = 'INACTIVE';

                IF v_status_count > 0 THEN
                    rdsadmin.rdsadmin_util.drop_logfile(grp => 4);
                    v_group4_dropped := TRUE;
                END IF;
            END IF;
        END LOOP;
    END;
END;
/

-- Step 2: Create Tablespace dmsts
CREATE TABLESPACE dms_ts
DATAFILE  
SIZE 10G
AUTOEXTEND ON
NEXT 1G
MAXSIZE UNLIMITED;

-- Drop user DMS_SAMPLE
drop user DMS_SAMPLE cascade;

-- Step 3: Create a new user (schema)
CREATE USER dms_sample IDENTIFIED BY dbadmin123
DEFAULT TABLESPACE dms_ts
QUOTA UNLIMITED ON dms_ts;

-- Step 4: Grant necessary privileges to the new user
GRANT CONNECT, RESOURCE, DBA TO dms_sample;
GRANT CREATE JOB TO dms_sample;
GRANT MANAGE SCHEDULER TO dms_sample;


-- Switch to the new schema (user)
ALTER SESSION SET CURRENT_SCHEMA = dms_sample;

-- Step 4: Create the tables under the dms_sample schema


-- Create the tables in the same order 

-- Table 1: Department
CREATE TABLE dms_sample.Department (
    DepartmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    DepartmentName VARCHAR2(100),
    Location VARCHAR2(100),
    Budget NUMBER(12,2),
    HeadOfDepartment VARCHAR2(100),
    EstablishedDate DATE,
    NumberOfEmployees NUMBER,
    DepartmentCode CHAR(5),
    OperatingHours VARCHAR2(50),
    DepartmentMission VARCHAR2(200),
    AnnualGoals VARCHAR2(200),
    PrimaryFunction VARCHAR2(100),
    SecondaryFunction VARCHAR2(100),
    PerformanceMetrics VARCHAR2(200)
);

-- Table 2: Client
CREATE TABLE dms_sample.Client (
    ClientID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ClientName VARCHAR2(100),
    Industry VARCHAR2(100),
    ContactPerson VARCHAR2(50),
    ContactEmail VARCHAR2(100),
    ContactPhone VARCHAR2(20),
    AddressID NUMBER,
    ClientSince DATE,
    ClientStatus VARCHAR2(50),
    ClientCode VARCHAR2(10),
    CreditLimit NUMBER(12,2),
    ClientType VARCHAR2(50),
    AnnualRevenue NUMBER(15,2),
    NumberOfEmployees NUMBER,
    CompanyWebsite VARCHAR2(100),
    PrimaryContactMethod VARCHAR2(50),
    ContractDocument BLOB
);

-- Table 3: Product
CREATE TABLE dms_sample.Product (
    ProductID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ProductName VARCHAR2(100),
    ProductCategory VARCHAR2(50),
    ProductDescription VARCHAR2(200),
    Price NUMBER(10,2),
    StockQuantity NUMBER,
    SupplierID NUMBER,
    ManufactureDate DATE,
    ExpiryDate DATE,
    WarrantyPeriod VARCHAR2(50),
    SKU VARCHAR2(20),
    IsDiscontinued CHAR(1) CHECK (IsDiscontinued IN ('Y', 'N')),
    ReorderLevel NUMBER,
    ProductWeight NUMBER(8,2),
    ProductDimensions VARCHAR2(50),
    StorageRequirements VARCHAR2(100),
    RegulatoryCompliance VARCHAR2(100),
    ProductManual CLOB
);

-- Table 4: Vendor
CREATE TABLE dms_sample.Vendor (
    VendorID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    VendorName VARCHAR2(100),
    Industry VARCHAR2(100),
    ContactPerson VARCHAR2(50),
    ContactEmail VARCHAR2(100),
    ContactPhone VARCHAR2(20),
    AddressID NUMBER,
    VendorSince DATE,
    VendorRating NUMBER(3,2),
    PaymentTerms VARCHAR2(50),
    ContractNumber VARCHAR2(20),
    IsPreferredVendor CHAR(1) CHECK (IsPreferredVendor IN ('Y', 'N')),
    VendorType VARCHAR2(50),
    AnnualSpend NUMBER(15,2),
    ProductCategories VARCHAR2(200),
    PaymentHistory VARCHAR2(200),
    ComplianceStatus VARCHAR2(50)
);

-- Table 5: Employee
CREATE TABLE dms_sample.Employee (
    EmployeeID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    unique_code         VARCHAR2(36) UNIQUE,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    Email VARCHAR2(100),
    PhoneNumber VARCHAR2(20),
    HireDate DATE,
    JobTitle VARCHAR2(50),
    DepartmentID NUMBER,
    ManagerID NUMBER,
    Salary NUMBER(10,2),
    AddressID NUMBER,
    DateOfBirth DATE,
    Gender VARCHAR2(10),
    MaritalStatus VARCHAR2(15),
    Nationality VARCHAR2(50),
    EmploymentType VARCHAR2(20),
    EmployeeStatus VARCHAR2(20),
    SocialSecurityNumber CHAR(11),
    EmployeeCode VARCHAR2(10),
    EmergencyContactName VARCHAR2(100),
    EmergencyContactPhone VARCHAR2(20),
    BankAccountNumber VARCHAR2(20),
    BankName VARCHAR2(50),
    HealthInsuranceProvider VARCHAR2(50),
    Resume CLOB
)
PARTITION BY RANGE (HireDate) (
    PARTITION p_before_2000 VALUES LESS THAN (TO_DATE('01-JAN-2000', 'DD-MON-YYYY')),
    PARTITION p_2000_2010 VALUES LESS THAN (TO_DATE('01-JAN-2011', 'DD-MON-YYYY')),
    PARTITION p_2010_2020 VALUES LESS THAN (TO_DATE('01-JAN-2021', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 6: Project
CREATE TABLE dms_sample.Project (
    ProjectID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ProjectName VARCHAR2(100) UNIQUE,
    StartDate DATE,
    EndDate DATE,
    Budget NUMBER(12,2),
    ProjectManagerID NUMBER,
    Status VARCHAR2(50),
    ClientID NUMBER,
    ProjectDescription CLOB,
    EstimatedHours NUMBER(8,2),
    ProjectCode CHAR(10),
    RiskAssessment VARCHAR2(200),
    KeyMilestones VARCHAR2(200),
    ResourceRequirements VARCHAR2(200),
    ProjectScope VARCHAR2(200),
    StakeholderAnalysis VARCHAR2(200)
)
PARTITION BY RANGE (StartDate) (
    PARTITION p_before_2000 VALUES LESS THAN (TO_DATE('01-JAN-2000', 'DD-MON-YYYY')),
    PARTITION p_2000_2010 VALUES LESS THAN (TO_DATE('01-JAN-2011', 'DD-MON-YYYY')),
    PARTITION p_2010_2020 VALUES LESS THAN (TO_DATE('01-JAN-2021', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 7: Address
CREATE TABLE dms_sample.Address (
    AddressID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Street VARCHAR2(100),
    City VARCHAR2(50),
    State VARCHAR2(50),
    ZipCode VARCHAR2(10),
    Country VARCHAR2(50),
    AddressType VARCHAR2(20),
    Latitude NUMBER(9,6),
    Longitude NUMBER(9,6),
    TimeZone VARCHAR2(50),
    IsResidential CHAR(1) CHECK (IsResidential IN ('Y', 'N')),
    BuildingNumber VARCHAR2(20),
    ApartmentNumber VARCHAR2(20),
    Landmark VARCHAR2(100),
    AddressNotes VARCHAR2(200),
    Directions VARCHAR2(200)
);

-- Table 8: Customer
CREATE TABLE dms_sample.Customer (
    CustomerID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    Email VARCHAR2(100),
    PhoneNumber VARCHAR2(20),
    AddressID NUMBER,
    DateOfBirth DATE,
    Gender VARCHAR2(10),
    MaritalStatus VARCHAR2(15),
    CustomerSince DATE,
    CustomerStatus VARCHAR2(50),
    LoyaltyPoints NUMBER,
    CustomerPhoto VARCHAR2(200),
    PreferredLanguage VARCHAR2(50),
    PreferredContactTime VARCHAR2(50),
    CreditRating VARCHAR2(50),
    AnnualIncome NUMBER(15,2),
    CustomerType VARCHAR2(50)
)
PARTITION BY RANGE (CustomerSince) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 9: Technician
CREATE TABLE dms_sample.Technician (
    TechnicianID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    Email VARCHAR2(100),
    PhoneNumber VARCHAR2(20),
    HireDate DATE,
    JobTitle VARCHAR2(50),
    DepartmentID NUMBER,
    TechnicianPhoto VARCHAR2(200),
    Certifications VARCHAR2(200),
    YearsOfExperience NUMBER,
    TechnicianRating NUMBER(3,2),
    SpecialtyArea VARCHAR2(100),
    AvailabilitySchedule VARCHAR2(100),
    EmergencyContact VARCHAR2(100),
    TechnicianNotes VARCHAR2(200)
);

-- Table 10: Salary
CREATE TABLE dms_sample.Salary (
    SalaryID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EmployeeID NUMBER,
    BaseSalary NUMBER(10,2),
    Bonus NUMBER(10,2),
    TaxDeductions NUMBER(10,2),
    InsuranceContributions NUMBER(10,2),
    PensionContributions NUMBER(10,2),
    NetSalary NUMBER(10,2),
    PayDate DATE,
    PaySlipFormat VARCHAR2(20),
    TaxBracket VARCHAR2(20),
    BonusScheme VARCHAR2(50),
    OvertimeRate NUMBER(5,2),
    UnionDues NUMBER(10,2),
    PayrollComments VARCHAR2(200)
)
PARTITION BY RANGE (PayDate) (
    PARTITION p_before_2010 VALUES LESS THAN (TO_DATE('01-JAN-2010', 'DD-MON-YYYY')),
    PARTITION p_2010_2020 VALUES LESS THAN (TO_DATE('01-JAN-2021', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 11: EmployeeProject
CREATE TABLE dms_sample.EmployeeProject (
    EmployeeProjectID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EmployeeID NUMBER,
    ProjectID NUMBER,
    Role VARCHAR2(50),
    StartDate DATE,
    EndDate DATE,
    HoursAllocated NUMBER(5,2),
    ProjectContributionPercentage NUMBER(5,2),
    IsActive CHAR(1) CHECK (IsActive IN ('Y', 'N')),
    Comments VARCHAR2(200),
    ProjectPhase VARCHAR2(50),
    RoleDescription VARCHAR2(200),
    AssignedBy VARCHAR2(100),
    AllocationStatus VARCHAR2(50),
    Feedback VARCHAR2(200)
);

-- Table 12: Timesheet
CREATE TABLE dms_sample.Timesheet (
    TimesheetID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EmployeeID NUMBER,
    DateWorked DATE,
    HoursWorked NUMBER(5,2),
    OvertimeHours NUMBER(5,2),
    TaskDescription VARCHAR2(200),
    ApprovalStatus VARCHAR2(50),
    ApprovedBy VARCHAR2(100),
    TimesheetRemarks VARCHAR2(500),
    IsBillable CHAR(1) CHECK (IsBillable IN ('Y', 'N')),
    WorkLocationID NUMBER,
    ProjectID NUMBER,
    ClientID NUMBER,
    TaskPriority VARCHAR2(50),
    TimeLogged TIMESTAMP
)
PARTITION BY RANGE (DateWorked) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 13: Expense
CREATE TABLE dms_sample.Expense (
    ExpenseID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EmployeeID NUMBER,
    ExpenseDate DATE,
    Amount NUMBER(10,2),
    ExpenseType VARCHAR2(50),
    PaymentMethod VARCHAR2(50),
    VendorID NUMBER,
    ExpenseDescription VARCHAR2(200),
    Receipt BLOB, 
    IsReimbursable CHAR(1) CHECK (IsReimbursable IN ('Y', 'N')),
    ApprovalStatus VARCHAR2(50),
    ApprovedBy VARCHAR2(100),
    ExpenseCategory VARCHAR2(50),
    PaymentReference VARCHAR2(100),
    TaxDeductible CHAR(1) CHECK (TaxDeductible IN ('Y', 'N'))
);

-- Table 14: Order
CREATE TABLE dms_sample."Order" (
    OrderID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    unique_code         VARCHAR2(36) UNIQUE,
    OrderDate DATE,
    ClientID NUMBER,
    TotalAmount NUMBER(12,2),
    ShippingAddressID NUMBER,
    BillingAddressID NUMBER,
    OrderStatus VARCHAR2(50),
    PaymentStatus VARCHAR2(50),
    DeliveryDate DATE,
    ShippingMethod VARCHAR2(50),
    TrackingNumber VARCHAR2(50),
    EstimatedDeliveryTime VARCHAR2(50),
    SpecialInstructions VARCHAR2(200),
    OrderType VARCHAR2(50),
    CustomerFeedback VARCHAR2(200),
    PackagingPreference VARCHAR2(50)
)
PARTITION BY RANGE (OrderDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 15: OrderProduct
CREATE TABLE dms_sample.OrderProduct (
    OrderProductID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    OrderID NUMBER,
    ProductID NUMBER,
    Quantity NUMBER,
    UnitPrice NUMBER(10,2),
    Discount NUMBER(5,2),
    TotalPrice NUMBER(12,2),
    DeliveryStatus VARCHAR2(50),
    IsGift CHAR(1) CHECK (IsGift IN ('Y', 'N')),
    GiftMessage VARCHAR2(200),
    ProductWarranty VARCHAR2(50),
    ReturnPolicy VARCHAR2(200),
    ItemCondition VARCHAR2(50),
    AdditionalFees NUMBER(10,2)
)
PARTITION BY HASH (OrderID) PARTITIONS 4;

-- Table 16: Invoice
CREATE TABLE dms_sample.Invoice (
    InvoiceID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    OrderID NUMBER,
    InvoiceDate DATE,
    DueDate DATE,
    TotalAmount NUMBER(12,2),
    TaxAmount NUMBER(10,2),
    DiscountAmount NUMBER(10,2),
    NetAmount NUMBER(12,2),
    PaymentStatus VARCHAR2(50),
    CurrencyCode CHAR(3),
    InvoiceType VARCHAR2(50),
    PaymentTerms VARCHAR2(100),
    InvoiceNotes VARCHAR2(200),
    LateFeePercentage NUMBER(5,2),
    InvoiceNumber VARCHAR2(20)
)
PARTITION BY RANGE (InvoiceDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 17: Payment
CREATE TABLE dms_sample.Payment (
    PaymentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    InvoiceID NUMBER,
    PaymentDate DATE,
    AmountPaid NUMBER(12,2),
    PaymentMethod VARCHAR2(50),
    PaymentReference VARCHAR2(100),
    PaymentStatus VARCHAR2(50),
    PaymentNotes VARCHAR2(200),
    PaymentCurrency CHAR(3),
    ExchangeRate NUMBER(10,4),
    PaymentProcessor VARCHAR2(50),
    TransactionFee NUMBER(10,2),
    SettlementDate DATE
)
PARTITION BY RANGE (PaymentDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 18: PurchaseOrder
CREATE TABLE dms_sample.PurchaseOrder (
    PurchaseOrderID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    VendorID NUMBER,
    OrderDate DATE,
    DeliveryDate DATE,
    TotalAmount NUMBER(12,2),
    PaymentStatus VARCHAR2(50),
    PurchaseOrderDetails VARCHAR2(500),
    ShippingMethod VARCHAR2(50),
    PurchaseOrderNumber VARCHAR2(20),
    ApprovalStatus VARCHAR2(50),
    ApprovedBy VARCHAR2(100),
    PaymentMethod VARCHAR2(50),
    PaymentReference VARCHAR2(100),
    ShipmentTrackingNumber VARCHAR2(50)
)
PARTITION BY RANGE (OrderDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 19: PurchaseOrderItem
CREATE TABLE dms_sample.PurchaseOrderItem (
    PurchaseOrderItemID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PurchaseOrderID NUMBER,
    ProductID NUMBER,
    Quantity NUMBER,
    UnitPrice NUMBER(10,2),
    Discount NUMBER(5,2),
    TotalPrice NUMBER(12,2),
    DeliveryStatus VARCHAR2(50),
    ReceivedDate DATE,
    BatchNumber VARCHAR2(20),
    ShelfLife VARCHAR2(50),
    QualityCheckStatus VARCHAR2(50),
    ReturnStatus VARCHAR2(50)
)
PARTITION BY HASH (PurchaseOrderID) PARTITIONS 4;

-- Table 20: Shipment
CREATE TABLE dms_sample.Shipment (
    ShipmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PurchaseOrderID NUMBER,
    ShipmentDate DATE,
    TrackingNumber VARCHAR2(50),
    CarrierName VARCHAR2(50),
    EstimatedDeliveryDate DATE,
    ShipmentStatus VARCHAR2(50),
    ShipmentRemarks VARCHAR2(500),
    Weight NUMBER(10,2),
    Dimensions VARCHAR2(50),
    Fragile CHAR(1) CHECK (Fragile IN ('Y', 'N')),
    TemperatureControlRequired CHAR(1) CHECK (TemperatureControlRequired IN ('Y', 'N')),
    SpecialHandlingInstructions VARCHAR2(200)
)
PARTITION BY RANGE (ShipmentDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 21: Inventory
CREATE TABLE dms_sample.Inventory (
    InventoryID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ProductID NUMBER,
    LocationID NUMBER,
    QuantityOnHand NUMBER,
    ReorderLevel NUMBER,
    LastUpdated DATE,
    StockStatus VARCHAR2(50),
    InventoryRemarks VARCHAR2(500),
    AverageCost NUMBER(10,2),
    LastRestocked DATE,
    StockTurnoverRate NUMBER(5,2),
    ShelfLocation VARCHAR2(50),
    InventoryValue NUMBER(12,2)
)
PARTITION BY RANGE (LastUpdated) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 22: StockMovement
CREATE TABLE dms_sample.StockMovement (
    MovementID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    InventoryID NUMBER,
    MovementDate DATE,
    Quantity NUMBER,
    MovementType VARCHAR2(50),
    ApprovedBy VARCHAR2(100),
    MovementRemarks VARCHAR2(500),
    MovementReference VARCHAR2(100),
    ReasonForMovement VARCHAR2(200),
    RecordedBy VARCHAR2(100),
    VerificationStatus VARCHAR2(50),
    MovementCost NUMBER(10,2)
)
PARTITION BY RANGE (MovementDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 23: CustomerOrder
CREATE TABLE dms_sample.CustomerOrder (
    CustomerOrderID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER,
    OrderDate DATE,
    TotalAmount NUMBER(12,2),
    ShippingAddressID NUMBER,
    BillingAddressID NUMBER,
    OrderStatus VARCHAR2(50),
    PaymentStatus VARCHAR2(50),
    DeliveryDate DATE,
    OrderDetails VARCHAR2(500),
    ShippingMethod VARCHAR2(50),
    TrackingNumber VARCHAR2(50),
    IsGift CHAR(1) CHECK (IsGift IN ('Y', 'N')),
    GiftMessage VARCHAR2(200),
    DiscountCode VARCHAR2(20),
    ReferralSource VARCHAR2(50)
)
PARTITION BY RANGE (OrderDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 24: CustomerOrderItem
CREATE TABLE dms_sample.CustomerOrderItem (
    CustomerOrderItemID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    CustomerOrderID NUMBER,
    ProductID NUMBER,
    Quantity NUMBER,
    UnitPrice NUMBER(10,2),
    Discount NUMBER(5,2),
    TotalPrice NUMBER(12,2),
    DeliveryStatus VARCHAR2(50),
    ItemCondition VARCHAR2(50),
    ReturnEligibility CHAR(1) CHECK (ReturnEligibility IN ('Y', 'N')),
    WarrantyStatus VARCHAR2(50),
    ExpirationDate DATE,
    SpecialInstructions VARCHAR2(200)
)
PARTITION BY HASH (CustomerOrderID) PARTITIONS 4;

-- Table 25: ProductReturn
CREATE TABLE dms_sample.ProductReturn (
    ReturnID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    CustomerOrderID NUMBER,
    ReturnDate DATE,
    ReturnReason VARCHAR2(200),
    RefundAmount NUMBER(10,2),
    ReturnStatus VARCHAR2(50),
    ReturnRemarks VARCHAR2(500),
    ConditionUponReturn VARCHAR2(50),
    ProcessingFee NUMBER(10,2),
    RefundMethod VARCHAR2(50),
    ApprovedBy VARCHAR2(100),
    RestockingFee NUMBER(10,2)
)
PARTITION BY RANGE (ReturnDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 26: Warranty
CREATE TABLE dms_sample.Warranty (
    WarrantyID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ProductID NUMBER,
    WarrantyPeriod VARCHAR2(50),
    WarrantyStartDate DATE,
    WarrantyEndDate DATE,
    WarrantyStatus VARCHAR2(50),
    WarrantyRemarks VARCHAR2(500),
    ExtendedWarrantyAvailable CHAR(1) CHECK (ExtendedWarrantyAvailable IN ('Y', 'N')),
    CoverageDetails VARCHAR2(200),
    WarrantyProvider VARCHAR2(100),
    ClaimLimit NUMBER(10,2),
    WarrantyType VARCHAR2(50)
)
PARTITION BY RANGE (WarrantyStartDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 27: ServiceRequest
CREATE TABLE dms_sample.ServiceRequest (
    ServiceRequestID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER,
    ProductID NUMBER,
    RequestDate DATE,
    ServiceType VARCHAR2(50),
    ServiceStatus VARCHAR2(50),
    ServiceDetails VARCHAR2(500),
    AssignedTechnicianID NUMBER,
    ExpectedCompletionDate DATE,
    ServiceRemarks VARCHAR2(500),
    PriorityLevel VARCHAR2(50),
    ContactMethod VARCHAR2(50),
    ServiceWarrantyStatus VARCHAR2(50),
    FollowUpDate DATE,
    PartsRequired VARCHAR2(200)
)
PARTITION BY RANGE (RequestDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 28: ServiceRequestAction
CREATE TABLE dms_sample.ServiceRequestAction (
    ServiceRequestActionID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ServiceRequestID NUMBER,
    ActionDate DATE,
    ActionType VARCHAR2(50),
    ActionDetails VARCHAR2(500),
    ActionTakenBy VARCHAR2(100),
    ActionStatus VARCHAR2(50),
    ActionCost NUMBER(10,2),
    TimeSpent NUMBER(5,2),
    AdditionalPartsRequired VARCHAR2(200),
    TechnicianComments VARCHAR2(500),
    NextSteps VARCHAR2(200)
)
PARTITION BY RANGE (ActionDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 29: ServiceAssignment
CREATE TABLE dms_sample.ServiceAssignment (
    ServiceAssignmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ServiceRequestID NUMBER,
    TechnicianID NUMBER,
    AssignmentDate DATE,
    CompletionDate DATE,
    AssignmentStatus VARCHAR2(50),
    AssignmentDetails VARCHAR2(500),
    Priority VARCHAR2(50),
    EstimatedHours NUMBER(5,2),
    ActualHours NUMBER(5,2),
    TaskDescription VARCHAR2(200),
    CustomerFeedback VARCHAR2(200),
    AssignmentDocument CLOB
)
PARTITION BY RANGE (AssignmentDate) (
    PARTITION p_before_2020 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Table 30: Location
CREATE TABLE dms_sample.Location (
    LocationID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    LocationName VARCHAR2(100),
    AddressID NUMBER,
    LocationType VARCHAR2(50),
    OperationalHours VARCHAR2(100),
    ContactNumber VARCHAR2(20),
    ManagerID NUMBER,
    ParkingAvailable CHAR(1) CHECK (ParkingAvailable IN ('Y', 'N')),
    FloorNumber VARCHAR2(10),
    BuildingName VARCHAR2(100),
    AccessCode VARCHAR2(20),
    SecurityLevel VARCHAR2(50),
    LocationDescription VARCHAR2(200)
);

-- Table 31: employee_new_data
CREATE TABLE dms_sample.employee_new_data (
    employee_id         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    unique_code         VARCHAR2(36) UNIQUE,
    first_name          VARCHAR2(50),
    last_name           VARCHAR2(50),
    date_of_birth       DATE,
    gender              CHAR(1),
    hire_date           DATE,
    job_title           VARCHAR2(100),
    department_id       NUMBER(10),
    department_name     VARCHAR2(100),
    manager_id          NUMBER(10),
    salary              NUMBER(15, 2),
    bonus               NUMBER(15, 2),
    email               VARCHAR2(100),
    phone_number        VARCHAR2(20),
    address_line1       VARCHAR2(255),
    address_line2       VARCHAR2(255),
    city                VARCHAR2(100),
    state               VARCHAR2(100),
    zip_code            VARCHAR2(10),
    country             VARCHAR2(50),
    emergency_contact   VARCHAR2(100),
    emergency_phone     VARCHAR2(20),
    ssn                 VARCHAR2(11),
    marital_status      VARCHAR2(20),
    nationality         VARCHAR2(50),
    employment_status   VARCHAR2(50),
    contract_type       VARCHAR2(50),
    contract_start_date DATE,
    contract_end_date   DATE,
    education_level     VARCHAR2(50),
    skills              VARCHAR2(255),
    certifications      VARCHAR2(255),
    languages_spoken    VARCHAR2(255),
    work_experience     NUMBER(3),
    previous_employer   VARCHAR2(100),
    previous_job_title  VARCHAR2(100),
    previous_salary     NUMBER(15, 2),
    reference_name      VARCHAR2(100),
    reference_phone     VARCHAR2(20),
    reference_email     VARCHAR2(100),
    performance_score   NUMBER(5, 2),
    last_promotion_date DATE,
    next_review_date    DATE,
    leave_balance       NUMBER(5, 2),
    sick_leave_balance  NUMBER(5, 2),
    vacation_balance    NUMBER(5, 2),
    pension_plan        VARCHAR2(50),
    health_insurance    VARCHAR2(50),
    dental_insurance    VARCHAR2(50),
    vision_insurance    VARCHAR2(50),
    life_insurance      VARCHAR2(50),
    stock_options       NUMBER(10),
    home_office         CHAR(1),
    remote_work         CHAR(1),
    travel_percentage   NUMBER(3),
    relocation_status   VARCHAR2(50),
    security_clearance  VARCHAR2(50),
    background_check    CHAR(1),
    drug_test           CHAR(1),
    work_shift          VARCHAR2(50),
    overtime_eligible   CHAR(1),
    union_member        CHAR(1),
    parking_spot        VARCHAR2(10),
    company_car         CHAR(1),
    expense_account     VARCHAR2(50),
    corporate_card      CHAR(1),
    notes               CLOB,
    created_at          TIMESTAMP DEFAULT SYSDATE,
    updated_at          TIMESTAMP DEFAULT SYSDATE,
    environment         VARCHAR2(10),
    CONSTRAINT environment_new_check CHECK (environment IN ('land', 'water', 'air'))
)
PARTITION BY RANGE (hire_date)
SUBPARTITION BY HASH (employee_id)
SUBPARTITIONS 8
(
    PARTITION p_2014 VALUES LESS THAN (TO_DATE('01-JAN-2015', 'DD-MON-YYYY')),
    PARTITION p_2015 VALUES LESS THAN (TO_DATE('01-JAN-2016', 'DD-MON-YYYY')),
    PARTITION p_2016 VALUES LESS THAN (TO_DATE('01-JAN-2017', 'DD-MON-YYYY')),
    PARTITION p_2017 VALUES LESS THAN (TO_DATE('01-JAN-2018', 'DD-MON-YYYY')),
    PARTITION p_2018 VALUES LESS THAN (TO_DATE('01-JAN-2019', 'DD-MON-YYYY')),
    PARTITION p_2019 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'DD-MON-YYYY')),
    PARTITION p_2020 VALUES LESS THAN (TO_DATE('01-JAN-2021', 'DD-MON-YYYY')),
    PARTITION p_2021 VALUES LESS THAN (TO_DATE('01-JAN-2022', 'DD-MON-YYYY')),
    PARTITION p_2022 VALUES LESS THAN (TO_DATE('01-JAN-2023', 'DD-MON-YYYY')),
    PARTITION p_2023 VALUES LESS THAN (TO_DATE('01-JAN-2024', 'DD-MON-YYYY')),
    PARTITION p_2024 VALUES LESS THAN (TO_DATE('01-JAN-2025', 'DD-MON-YYYY')),
    PARTITION p_future VALUES LESS THAN (MAXVALUE)
);

-- Load Data into Schema

-- Utility Functions

-- Utility function to generate a random string of specified length
CREATE OR REPLACE FUNCTION dms_sample.random_string(p_length NUMBER) RETURN VARCHAR2 IS
    v_string VARCHAR2(4000);
BEGIN
    SELECT DBMS_RANDOM.STRING('U', p_length)
    INTO v_string
    FROM DUAL;
    RETURN v_string;
END;
/

-- Utility function to generate a random number within a range
CREATE OR REPLACE FUNCTION dms_sample.random_number(p_min NUMBER, p_max NUMBER) RETURN NUMBER IS
    v_number NUMBER;
BEGIN
    SELECT ROUND(DBMS_RANDOM.VALUE(p_min, p_max), 2)
    INTO v_number
    FROM DUAL;
    RETURN v_number;
END;
/

-- Utility function to generate a random date within a range
CREATE OR REPLACE FUNCTION dms_sample.random_date(p_start DATE, p_end DATE) RETURN DATE IS
    v_date DATE;
BEGIN
    SELECT p_start + DBMS_RANDOM.VALUE(0, p_end - p_start)
    INTO v_date
    FROM DUAL;
    RETURN v_date;
END;
/

-- Utility function to generate random choice values

CREATE OR REPLACE FUNCTION dms_sample.random_choice(p_choices VARCHAR2) RETURN VARCHAR2 IS
    v_list SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST(); -- Using ODCIVARCHAR2LIST for storing the choices
    v_choice VARCHAR2(100);
    v_comma_pos NUMBER := 0;
    v_start_pos NUMBER := 1;
BEGIN
    -- Split the string by commas
    LOOP
        v_comma_pos := INSTR(p_choices, ',', v_start_pos);
        IF v_comma_pos > 0 THEN
            v_list.EXTEND;
            v_list(v_list.COUNT) := SUBSTR(p_choices, v_start_pos, v_comma_pos - v_start_pos);
            v_start_pos := v_comma_pos + 1;
        ELSE
            v_list.EXTEND;
            v_list(v_list.COUNT) := SUBSTR(p_choices, v_start_pos);
            EXIT;
        END IF;
    END LOOP;

    -- Choose a random value from the list
    v_choice := v_list(TRUNC(DBMS_RANDOM.VALUE(1, v_list.COUNT + 1)));

    RETURN v_choice;
END;
/


-- Load Tables 

-- Table 1: Load Department

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_department(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_department IS TABLE OF dms_sample.Department%ROWTYPE INDEX BY PLS_INTEGER;
    v_departments t_department;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_departments(i).DepartmentID := NULL; -- Auto-generated by IDENTITY
        v_departments(i).DepartmentName := dms_sample.random_string(20);
        v_departments(i).Location := dms_sample.random_string(20);
        v_departments(i).Budget := dms_sample.random_number(50000, 2000000);
        v_departments(i).HeadOfDepartment := dms_sample.random_string(20);
        v_departments(i).EstablishedDate := dms_sample.random_date(DATE '1980-01-01', SYSDATE);
        v_departments(i).NumberOfEmployees := TRUNC(dms_sample.random_number(10, 1000));
        v_departments(i).DepartmentCode := dms_sample.random_string(5);
        v_departments(i).OperatingHours := dms_sample.random_string(9);
        v_departments(i).DepartmentMission := dms_sample.random_string(100);
        v_departments(i).AnnualGoals := dms_sample.random_string(100);
        v_departments(i).PrimaryFunction := dms_sample.random_string(50);
        v_departments(i).SecondaryFunction := dms_sample.random_string(50);
        v_departments(i).PerformanceMetrics := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            -- Direct path insert with APPEND hint
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Department VALUES v_departments(j);

            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    -- Commit any remaining records
    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Department VALUES v_departments(i);

        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 2: Load Client

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_client(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_client IS TABLE OF dms_sample.Client%ROWTYPE INDEX BY PLS_INTEGER;
    v_clients t_client;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_clients(i).ClientID := NULL;
        v_clients(i).ClientName := dms_sample.random_string(20);
        v_clients(i).Industry := dms_sample.random_choice('Technology,Finance,Healthcare,Education,Manufacturing,Retail');
        v_clients(i).ContactPerson := dms_sample.random_string(10) || ' ' || dms_sample.random_string(10);
        v_clients(i).ContactEmail := LOWER(dms_sample.random_string(10)) || '@' || LOWER(dms_sample.random_string(5)) || '.com';
        v_clients(i).ContactPhone := dms_sample.random_string(10);
        v_clients(i).AddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_clients(i).ClientSince := dms_sample.random_date(DATE '1990-01-01', SYSDATE);
        v_clients(i).ClientStatus := dms_sample.random_choice('Active,Inactive');
        v_clients(i).ClientCode := dms_sample.random_string(10);
        v_clients(i).CreditLimit := dms_sample.random_number(10000, 1000000);
        v_clients(i).ClientType := dms_sample.random_choice('Small Business,Enterprise,Govt');
        v_clients(i).AnnualRevenue := dms_sample.random_number(500000, 50000000);
        v_clients(i).NumberOfEmployees := TRUNC(dms_sample.random_number(10, 1000));
        v_clients(i).CompanyWebsite := 'www.' || LOWER(dms_sample.random_string(10)) || '.com';
        v_clients(i).PrimaryContactMethod := dms_sample.random_choice('Email,Phone');
        v_clients(i).ContractDocument := EMPTY_BLOB();

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Client VALUES v_clients(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Client VALUES v_clients(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 3: Load Product

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_product(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_product IS TABLE OF dms_sample.Product%ROWTYPE INDEX BY PLS_INTEGER;
    v_products t_product;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_products(i).ProductID := NULL;
        v_products(i).ProductName := dms_sample.random_string(20);
        v_products(i).ProductCategory := dms_sample.random_choice('Electronics,Furniture,Apparel,Books,Tools');
        v_products(i).ProductDescription := dms_sample.random_string(100);
        v_products(i).Price := dms_sample.random_number(10, 5000);
        v_products(i).StockQuantity := TRUNC(dms_sample.random_number(0, 1000));
        v_products(i).SupplierID := TRUNC(dms_sample.random_number(1, 1000));
        v_products(i).ManufactureDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_products(i).ExpiryDate := dms_sample.random_date(SYSDATE, SYSDATE + 3650);
        v_products(i).WarrantyPeriod := dms_sample.random_string(10);
        v_products(i).SKU := dms_sample.random_string(20);
        v_products(i).IsDiscontinued := dms_sample.random_choice('Y,N');
        v_products(i).ReorderLevel := TRUNC(dms_sample.random_number(10, 100));
        v_products(i).ProductWeight := dms_sample.random_number(1, 100);
        v_products(i).ProductDimensions := dms_sample.random_string(10);
        v_products(i).StorageRequirements := dms_sample.random_string(20);
        v_products(i).RegulatoryCompliance := dms_sample.random_string(20);
        v_products(i).ProductManual := EMPTY_CLOB();

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Product VALUES v_products(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Product VALUES v_products(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 4: Load Vendor

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_vendor(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_vendor IS TABLE OF dms_sample.Vendor%ROWTYPE INDEX BY PLS_INTEGER;
    v_vendors t_vendor;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_vendors(i).VendorID := NULL;
        v_vendors(i).VendorName := dms_sample.random_string(20);
        v_vendors(i).Industry := dms_sample.random_choice('Technology,Finance,Healthcare,Education,Manufacturing,Retail');
        v_vendors(i).ContactPerson := dms_sample.random_string(10) || ' ' || dms_sample.random_string(10);
        v_vendors(i).ContactEmail := LOWER(dms_sample.random_string(10)) || '@' || LOWER(dms_sample.random_string(5)) || '.com';
        v_vendors(i).ContactPhone := dms_sample.random_string(10);
        v_vendors(i).AddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_vendors(i).VendorSince := dms_sample.random_date(DATE '1990-01-01', SYSDATE);
        v_vendors(i).VendorRating := dms_sample.random_number(1, 5);
        v_vendors(i).PaymentTerms := dms_sample.random_string(10);
        v_vendors(i).ContractNumber := dms_sample.random_string(20);
        v_vendors(i).IsPreferredVendor := dms_sample.random_choice('Y,N');
        v_vendors(i).VendorType := dms_sample.random_choice('Local,International');
        v_vendors(i).AnnualSpend := dms_sample.random_number(100000, 10000000);
        v_vendors(i).ProductCategories := dms_sample.random_string(50);
        v_vendors(i).PaymentHistory := dms_sample.random_string(50);
        v_vendors(i).ComplianceStatus := dms_sample.random_string(20);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Vendor VALUES v_vendors(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Vendor VALUES v_vendors(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 5: Load Employee

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_employee(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_employee IS TABLE OF dms_sample.Employee%ROWTYPE INDEX BY PLS_INTEGER;
    v_employees t_employee;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_employees(i).EmployeeID := NULL;
        v_employees(i).unique_code := SYS_GUID();
        v_employees(i).FirstName := dms_sample.random_string(10);
        v_employees(i).LastName := dms_sample.random_string(10);
        v_employees(i).Email := LOWER(dms_sample.random_string(10)) || '@' || LOWER(dms_sample.random_string(5)) || '.com';
        v_employees(i).PhoneNumber := LPAD(ROUND(DBMS_RANDOM.VALUE(1000000000, 9999999999)), 10, '0');
        v_employees(i).HireDate := dms_sample.random_date(DATE '1990-01-01', SYSDATE);
        v_employees(i).JobTitle := dms_sample.random_choice('Manager,Developer,Analyst,Consultant,Engineer');
        v_employees(i).DepartmentID := TRUNC(dms_sample.random_number(1, 1000));
        v_employees(i).ManagerID := NULL;  -- Assuming no Manager for simplicity
        v_employees(i).Salary := dms_sample.random_number(30000, 120000);
        v_employees(i).AddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_employees(i).DateOfBirth := dms_sample.random_date(DATE '1950-01-01', DATE '2000-01-01');
        v_employees(i).Gender := dms_sample.random_choice('M,F');
        v_employees(i).MaritalStatus := dms_sample.random_choice('Single,Married,Divorced,Widowed');
        v_employees(i).Nationality := dms_sample.random_string(10);
        v_employees(i).EmploymentType := dms_sample.random_choice('Full-Time,Part-Time,Contract');
        v_employees(i).EmployeeStatus := dms_sample.random_choice('Active,Inactive');
        v_employees(i).SocialSecurityNumber := LPAD(ROUND(DBMS_RANDOM.VALUE(100000000, 999999999)), 9, '0');
        v_employees(i).EmployeeCode := dms_sample.random_string(10);
        v_employees(i).EmergencyContactName := dms_sample.random_string(10) || ' ' || dms_sample.random_string(10);
        v_employees(i).EmergencyContactPhone := LPAD(ROUND(DBMS_RANDOM.VALUE(1000000000, 9999999999)), 10, '0');
        v_employees(i).BankAccountNumber := LPAD(ROUND(DBMS_RANDOM.VALUE(1000000000000000, 9999999999999999)), 16, '0');
        v_employees(i).BankName := dms_sample.random_string(20);
        v_employees(i).HealthInsuranceProvider := dms_sample.random_string(20);
        v_employees(i).Resume := EMPTY_CLOB();

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Employee VALUES v_employees(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Employee VALUES v_employees(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 6: Load Project

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_project(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_project IS TABLE OF dms_sample.Project%ROWTYPE INDEX BY PLS_INTEGER;
    v_projects t_project;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_projects(i).ProjectID := NULL;
        v_projects(i).ProjectName := dms_sample.random_string(20);
        v_projects(i).StartDate := dms_sample.random_date(DATE '1990-01-01', SYSDATE);
        v_projects(i).EndDate := dms_sample.random_date(v_projects(i).StartDate, SYSDATE + 1000);
        v_projects(i).Budget := dms_sample.random_number(10000, 10000000);
        v_projects(i).ProjectManagerID := TRUNC(dms_sample.random_number(1, 1000));
        v_projects(i).Status := dms_sample.random_choice('Planning,Active,Completed,On-Hold');
        v_projects(i).ClientID := TRUNC(dms_sample.random_number(1, 1000));
        v_projects(i).ProjectDescription := EMPTY_CLOB();
        v_projects(i).EstimatedHours := dms_sample.random_number(100, 5000);
        v_projects(i).ProjectCode := dms_sample.random_string(10);
        v_projects(i).RiskAssessment := dms_sample.random_string(200);
        v_projects(i).KeyMilestones := dms_sample.random_string(200);
        v_projects(i).ResourceRequirements := dms_sample.random_string(200);
        v_projects(i).ProjectScope := dms_sample.random_string(200);
        v_projects(i).StakeholderAnalysis := dms_sample.random_string(200);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Project VALUES v_projects(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Project VALUES v_projects(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 7: Load Address

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_address(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_address IS TABLE OF dms_sample.Address%ROWTYPE INDEX BY PLS_INTEGER;
    v_addresses t_address;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_addresses(i).AddressID := NULL;
        v_addresses(i).Street := dms_sample.random_string(20);
        v_addresses(i).City := dms_sample.random_string(15);
        v_addresses(i).State := dms_sample.random_string(15);
        v_addresses(i).ZipCode := LPAD(ROUND(DBMS_RANDOM.VALUE(10000, 99999)), 5, '0');
        v_addresses(i).Country := dms_sample.random_string(15);
        v_addresses(i).AddressType := dms_sample.random_choice('Residential,Commercial');
        v_addresses(i).Latitude := DBMS_RANDOM.VALUE(-90, 90);
        v_addresses(i).Longitude := DBMS_RANDOM.VALUE(-180, 180);
        v_addresses(i).TimeZone := 'GMT' || CASE WHEN DBMS_RANDOM.VALUE(-12, 12) >= 0 THEN '+' ELSE '' END || ROUND(DBMS_RANDOM.VALUE(-12, 12));
        v_addresses(i).IsResidential := dms_sample.random_choice('Y,N');
        v_addresses(i).BuildingNumber := dms_sample.random_string(10);
        v_addresses(i).ApartmentNumber := dms_sample.random_string(5);
        v_addresses(i).Landmark := dms_sample.random_string(30);
        v_addresses(i).AddressNotes := dms_sample.random_string(100);
        v_addresses(i).Directions := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Address VALUES v_addresses(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Address VALUES v_addresses(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 8: Load Customer

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_customer(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_customer IS TABLE OF dms_sample.Customer%ROWTYPE INDEX BY PLS_INTEGER;
    v_customers t_customer;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_customers(i).CustomerID := NULL;
        v_customers(i).FirstName := dms_sample.random_string(10);
        v_customers(i).LastName := dms_sample.random_string(10);
        v_customers(i).Email := LOWER(dms_sample.random_string(10)) || '@' || LOWER(dms_sample.random_string(5)) || '.com';
        v_customers(i).PhoneNumber := LPAD(ROUND(DBMS_RANDOM.VALUE(1000000000, 9999999999)), 10, '0');
        v_customers(i).AddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_customers(i).DateOfBirth := dms_sample.random_date(DATE '1950-01-01', DATE '2000-01-01');
        v_customers(i).Gender := dms_sample.random_choice('M,F');
        v_customers(i).MaritalStatus := dms_sample.random_choice('Single,Married,Divorced,Widowed');
        v_customers(i).CustomerSince := dms_sample.random_date(DATE '1990-01-01', SYSDATE);
        v_customers(i).CustomerStatus := dms_sample.random_choice('Active,Inactive');
        v_customers(i).LoyaltyPoints := TRUNC(dms_sample.random_number(0, 10000));
        v_customers(i).CustomerPhoto := dms_sample.random_string(20);
        v_customers(i).PreferredLanguage := dms_sample.random_choice('English,Spanish,French,German,Chinese');
        v_customers(i).PreferredContactTime := dms_sample.random_choice('Morning,Afternoon,Evening');
        v_customers(i).CreditRating := dms_sample.random_string(3);
        v_customers(i).AnnualIncome := dms_sample.random_number(20000, 200000);
        v_customers(i).CustomerType := dms_sample.random_choice('Retail,Wholesale,Corporate');

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Customer VALUES v_customers(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Customer VALUES v_customers(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 9: Load Technician

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_technician(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_technician IS TABLE OF dms_sample.Technician%ROWTYPE INDEX BY PLS_INTEGER;
    v_technicians t_technician;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_technicians(i).TechnicianID := NULL;
        v_technicians(i).FirstName := dms_sample.random_string(10);
        v_technicians(i).LastName := dms_sample.random_string(10);
        v_technicians(i).Email := LOWER(dms_sample.random_string(10)) || '@' || LOWER(dms_sample.random_string(5)) || '.com';
        v_technicians(i).PhoneNumber := LPAD(ROUND(DBMS_RANDOM.VALUE(1000000000, 9999999999)), 10, '0');
        v_technicians(i).HireDate := dms_sample.random_date(DATE '1990-01-01', SYSDATE);
        v_technicians(i).JobTitle := dms_sample.random_choice('Technician,Senior Technician,Lead Technician');
        v_technicians(i).DepartmentID := TRUNC(dms_sample.random_number(1, 1000));
        v_technicians(i).TechnicianPhoto := dms_sample.random_string(20);
        v_technicians(i).Certifications := dms_sample.random_string(50);
        v_technicians(i).YearsOfExperience := TRUNC(dms_sample.random_number(1, 30));
        v_technicians(i).TechnicianRating := ROUND(DBMS_RANDOM.VALUE(1, 5), 2);
        v_technicians(i).SpecialtyArea := dms_sample.random_string(20);
        v_technicians(i).AvailabilitySchedule := dms_sample.random_choice('Day,Evening,Night');
        v_technicians(i).EmergencyContact := dms_sample.random_string(20);
        v_technicians(i).TechnicianNotes := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Technician VALUES v_technicians(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Technician VALUES v_technicians(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 10: Load Salary

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_salary(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_salary IS TABLE OF dms_sample.Salary%ROWTYPE INDEX BY PLS_INTEGER;
    v_salaries t_salary;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_salaries(i).SalaryID := NULL;
        v_salaries(i).EmployeeID := TRUNC(dms_sample.random_number(1, 1000));
        v_salaries(i).BaseSalary := dms_sample.random_number(30000, 150000);
        v_salaries(i).Bonus := dms_sample.random_number(0, 20000);
        v_salaries(i).TaxDeductions := dms_sample.random_number(5000, 20000);
        v_salaries(i).InsuranceContributions := dms_sample.random_number(1000, 10000);
        v_salaries(i).PensionContributions := dms_sample.random_number(2000, 10000);
        v_salaries(i).NetSalary := v_salaries(i).BaseSalary + v_salaries(i).Bonus - v_salaries(i).TaxDeductions - v_salaries(i).InsuranceContributions - v_salaries(i).PensionContributions;
        v_salaries(i).PayDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_salaries(i).PaySlipFormat := dms_sample.random_choice('PDF,Printed');
        v_salaries(i).TaxBracket := dms_sample.random_choice('A,B,C');
        v_salaries(i).BonusScheme := dms_sample.random_string(20);
        v_salaries(i).OvertimeRate := dms_sample.random_number(1, 50);
        v_salaries(i).UnionDues := dms_sample.random_number(0, 5000);
        v_salaries(i).PayrollComments := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Salary VALUES v_salaries(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Salary VALUES v_salaries(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 11: Load Employee Project

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_employee_project(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_employee_project IS TABLE OF dms_sample.EmployeeProject%ROWTYPE INDEX BY PLS_INTEGER;
    v_employee_projects t_employee_project;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_employee_projects(i).EmployeeProjectID := NULL;
        v_employee_projects(i).EmployeeID := TRUNC(dms_sample.random_number(1, 1000));
        v_employee_projects(i).ProjectID := TRUNC(dms_sample.random_number(1, 1000));
        v_employee_projects(i).Role := dms_sample.random_string(20);
        v_employee_projects(i).StartDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_employee_projects(i).EndDate := dms_sample.random_date(v_employee_projects(i).StartDate, SYSDATE);
        v_employee_projects(i).HoursAllocated := dms_sample.random_number(10, 200);
        v_employee_projects(i).ProjectContributionPercentage := dms_sample.random_number(0, 100);
        v_employee_projects(i).IsActive := dms_sample.random_choice('Y,N');
        v_employee_projects(i).Comments := dms_sample.random_string(50);
        v_employee_projects(i).ProjectPhase := dms_sample.random_string(20);
        v_employee_projects(i).RoleDescription := dms_sample.random_string(100);
        v_employee_projects(i).AssignedBy := dms_sample.random_string(20);
        v_employee_projects(i).AllocationStatus := dms_sample.random_choice('Allocated,In Progress,Completed');
        v_employee_projects(i).Feedback := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.EmployeeProject VALUES v_employee_projects(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.EmployeeProject VALUES v_employee_projects(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 12: Load Timesheet

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_timesheet(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_timesheet IS TABLE OF dms_sample.Timesheet%ROWTYPE INDEX BY PLS_INTEGER;
    v_timesheets t_timesheet;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_timesheets(i).TimesheetID := NULL;
        v_timesheets(i).EmployeeID := TRUNC(dms_sample.random_number(1, 1000));
        v_timesheets(i).DateWorked := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_timesheets(i).HoursWorked := dms_sample.random_number(1, 10);
        v_timesheets(i).OvertimeHours := dms_sample.random_number(0, 5);
        v_timesheets(i).TaskDescription := dms_sample.random_string(50);
        v_timesheets(i).ApprovalStatus := dms_sample.random_choice('Approved,Pending,Rejected');
        v_timesheets(i).ApprovedBy := dms_sample.random_string(20);
        v_timesheets(i).TimesheetRemarks := dms_sample.random_string(100);
        v_timesheets(i).IsBillable := dms_sample.random_choice('Y,N');
        v_timesheets(i).WorkLocationID := TRUNC(dms_sample.random_number(1, 1000));
        v_timesheets(i).ProjectID := TRUNC(dms_sample.random_number(1, 1000));
        v_timesheets(i).ClientID := TRUNC(dms_sample.random_number(1, 1000));
        v_timesheets(i).TaskPriority := dms_sample.random_choice('Low,Medium,High');
        v_timesheets(i).TimeLogged := SYSTIMESTAMP;

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Timesheet VALUES v_timesheets(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Timesheet VALUES v_timesheets(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 13: Expense

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_expense(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_expense IS TABLE OF dms_sample.Expense%ROWTYPE INDEX BY PLS_INTEGER;
    v_expenses t_expense;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_expenses(i).ExpenseID := NULL;
        v_expenses(i).EmployeeID := TRUNC(dms_sample.random_number(1, 1000));
        v_expenses(i).ExpenseDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_expenses(i).Amount := dms_sample.random_number(10, 5000);
        v_expenses(i).ExpenseType := dms_sample.random_choice('Travel,Meals,Equipment,Office Supplies');
        v_expenses(i).PaymentMethod := dms_sample.random_choice('Credit Card,Cash,Direct Deposit');
        v_expenses(i).VendorID := TRUNC(dms_sample.random_number(1, 1000));
        v_expenses(i).ExpenseDescription := dms_sample.random_string(50);
        v_expenses(i).Receipt := EMPTY_BLOB();
        v_expenses(i).IsReimbursable := dms_sample.random_choice('Y,N');
        v_expenses(i).ApprovalStatus := dms_sample.random_choice('Approved,Pending,Rejected');
        v_expenses(i).ApprovedBy := dms_sample.random_string(20);
        v_expenses(i).ExpenseCategory := dms_sample.random_string(20);
        v_expenses(i).PaymentReference := dms_sample.random_string(20);
        v_expenses(i).TaxDeductible := dms_sample.random_choice('Y,N');

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Expense VALUES v_expenses(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Expense VALUES v_expenses(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 14: Load Order

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_order(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_order IS TABLE OF dms_sample."Order"%ROWTYPE INDEX BY PLS_INTEGER;
    v_orders t_order;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_orders(i).OrderID := NULL;
        v_orders(i).unique_code := SYS_GUID();
        v_orders(i).OrderDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_orders(i).ClientID := TRUNC(dms_sample.random_number(1, 1000));
        v_orders(i).TotalAmount := dms_sample.random_number(100, 10000);
        v_orders(i).ShippingAddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_orders(i).BillingAddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_orders(i).OrderStatus := dms_sample.random_choice('Pending,Shipped,Delivered,Canceled');
        v_orders(i).PaymentStatus := dms_sample.random_choice('Paid,Unpaid');
        v_orders(i).DeliveryDate := dms_sample.random_date(v_orders(i).OrderDate, SYSDATE);
        v_orders(i).ShippingMethod := dms_sample.random_choice('Ground,Air,Express');
        v_orders(i).TrackingNumber := dms_sample.random_string(15);
        v_orders(i).EstimatedDeliveryTime := dms_sample.random_string(10);
        v_orders(i).SpecialInstructions := dms_sample.random_string(100);
        v_orders(i).OrderType := dms_sample.random_choice('Online,In-Store');
        v_orders(i).CustomerFeedback := dms_sample.random_string(100);
        v_orders(i).PackagingPreference := dms_sample.random_string(20);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample."Order" VALUES v_orders(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample."Order" VALUES v_orders(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 15: Load OrderProduct

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_order_product(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_order_product IS TABLE OF dms_sample.OrderProduct%ROWTYPE INDEX BY PLS_INTEGER;
    v_order_products t_order_product;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_order_products(i).OrderProductID := NULL;
        v_order_products(i).OrderID := TRUNC(dms_sample.random_number(1, 1000));
        v_order_products(i).ProductID := TRUNC(dms_sample.random_number(1, 1000));
        v_order_products(i).Quantity := TRUNC(dms_sample.random_number(1, 100));
        v_order_products(i).UnitPrice := dms_sample.random_number(10, 1000);
        v_order_products(i).Discount := dms_sample.random_number(0, 50);
        v_order_products(i).TotalPrice := (v_order_products(i).Quantity * v_order_products(i).UnitPrice) - (v_order_products(i).Discount);
        v_order_products(i).DeliveryStatus := dms_sample.random_choice('Pending,Shipped,Delivered');
        v_order_products(i).IsGift := dms_sample.random_choice('Y,N');
        v_order_products(i).GiftMessage := dms_sample.random_string(50);
        v_order_products(i).ProductWarranty := dms_sample.random_string(20);
        v_order_products(i).ReturnPolicy := dms_sample.random_string(50);
        v_order_products(i).ItemCondition := dms_sample.random_string(20);
        v_order_products(i).AdditionalFees := dms_sample.random_number(0, 100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.OrderProduct VALUES v_order_products(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.OrderProduct VALUES v_order_products(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 16: Load Invoice

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_invoice(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_invoice IS TABLE OF dms_sample.Invoice%ROWTYPE INDEX BY PLS_INTEGER;
    v_invoices t_invoice;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_invoices(i).InvoiceID := NULL;
        v_invoices(i).OrderID := TRUNC(dms_sample.random_number(1, 1000));
        v_invoices(i).InvoiceDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_invoices(i).DueDate := dms_sample.random_date(v_invoices(i).InvoiceDate, v_invoices(i).InvoiceDate + 30);
        v_invoices(i).TotalAmount := dms_sample.random_number(100, 10000);
        v_invoices(i).TaxAmount := v_invoices(i).TotalAmount * 0.1;
        v_invoices(i).DiscountAmount := dms_sample.random_number(0, 500);
        v_invoices(i).NetAmount := v_invoices(i).TotalAmount - v_invoices(i).DiscountAmount + v_invoices(i).TaxAmount;
        v_invoices(i).PaymentStatus := dms_sample.random_choice('Paid,Unpaid');
        v_invoices(i).CurrencyCode := dms_sample.random_choice('USD,EUR,JPY');
        v_invoices(i).InvoiceType := dms_sample.random_choice('Standard,Proforma,Recurring');
        v_invoices(i).PaymentTerms := dms_sample.random_choice('Net 30,Net 60,Due on Receipt');
        v_invoices(i).InvoiceNotes := dms_sample.random_string(100);
        v_invoices(i).LateFeePercentage := dms_sample.random_number(1, 10);
        v_invoices(i).InvoiceNumber := dms_sample.random_string(15);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Invoice VALUES v_invoices(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Invoice VALUES v_invoices(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 17: Payment

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_payment(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_payment IS TABLE OF dms_sample.Payment%ROWTYPE INDEX BY PLS_INTEGER;
    v_payments t_payment;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_payments(i).PaymentID := NULL;
        v_payments(i).InvoiceID := TRUNC(dms_sample.random_number(1, 1000));
        v_payments(i).PaymentDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_payments(i).AmountPaid := dms_sample.random_number(50, 10000);
        v_payments(i).PaymentMethod := dms_sample.random_choice('Credit Card,Wire Transfer,Cash');
        v_payments(i).PaymentReference := dms_sample.random_string(15);
        v_payments(i).PaymentStatus := dms_sample.random_choice('Completed,Pending,Failed');
        v_payments(i).PaymentNotes := dms_sample.random_string(100);
        v_payments(i).PaymentCurrency := dms_sample.random_choice('USD,EUR,JPY');
        v_payments(i).ExchangeRate := dms_sample.random_number(0.8, 1.5);
        v_payments(i).PaymentProcessor := dms_sample.random_string(20);
        v_payments(i).TransactionFee := dms_sample.random_number(1, 50);
        v_payments(i).SettlementDate := dms_sample.random_date(v_payments(i).PaymentDate, v_payments(i).PaymentDate + 7);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Payment VALUES v_payments(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Payment VALUES v_payments(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 18: Load purchaseOrder

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_purchase_order(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_purchase_order IS TABLE OF dms_sample.PurchaseOrder%ROWTYPE INDEX BY PLS_INTEGER;
    v_purchase_orders t_purchase_order;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_purchase_orders(i).PurchaseOrderID := NULL;
        v_purchase_orders(i).VendorID := TRUNC(dms_sample.random_number(1, 1000));
        v_purchase_orders(i).OrderDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_purchase_orders(i).DeliveryDate := dms_sample.random_date(v_purchase_orders(i).OrderDate, v_purchase_orders(i).OrderDate + 30);
        v_purchase_orders(i).TotalAmount := dms_sample.random_number(100, 10000);
        v_purchase_orders(i).PaymentStatus := dms_sample.random_choice('Paid,Pending,Unpaid');
        v_purchase_orders(i).PurchaseOrderDetails := dms_sample.random_string(100);
        v_purchase_orders(i).ShippingMethod := dms_sample.random_choice('Ground,Air,Sea');
        v_purchase_orders(i).PurchaseOrderNumber := dms_sample.random_string(15);
        v_purchase_orders(i).ApprovalStatus := dms_sample.random_choice('Approved,Pending,Rejected');
        v_purchase_orders(i).ApprovedBy := dms_sample.random_string(20);
        v_purchase_orders(i).PaymentMethod := dms_sample.random_choice('Credit Card,Bank Transfer,Cash');
        v_purchase_orders(i).PaymentReference := dms_sample.random_string(15);
        v_purchase_orders(i).ShipmentTrackingNumber := dms_sample.random_string(20);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.PurchaseOrder VALUES v_purchase_orders(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.PurchaseOrder VALUES v_purchase_orders(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 19: Load PurchaseOrderItem

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_purchase_order_item(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_purchase_order_item IS TABLE OF dms_sample.PurchaseOrderItem%ROWTYPE INDEX BY PLS_INTEGER;
    v_purchase_order_items t_purchase_order_item;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_purchase_order_items(i).PurchaseOrderItemID := NULL;
        v_purchase_order_items(i).PurchaseOrderID := TRUNC(dms_sample.random_number(1, 1000));
        v_purchase_order_items(i).ProductID := TRUNC(dms_sample.random_number(1, 1000));
        v_purchase_order_items(i).Quantity := TRUNC(dms_sample.random_number(1, 100));
        v_purchase_order_items(i).UnitPrice := dms_sample.random_number(10, 1000);
        v_purchase_order_items(i).Discount := dms_sample.random_number(0, 50);
        v_purchase_order_items(i).TotalPrice := (v_purchase_order_items(i).Quantity * v_purchase_order_items(i).UnitPrice) - v_purchase_order_items(i).Discount;
        v_purchase_order_items(i).DeliveryStatus := dms_sample.random_choice('Pending,Delivered');
        v_purchase_order_items(i).ReceivedDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_purchase_order_items(i).BatchNumber := dms_sample.random_string(10);
        v_purchase_order_items(i).ShelfLife := dms_sample.random_string(10);
        v_purchase_order_items(i).QualityCheckStatus := dms_sample.random_choice('Passed,Failed');
        v_purchase_order_items(i).ReturnStatus := dms_sample.random_choice('Returned,Not Returned');

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.PurchaseOrderItem VALUES v_purchase_order_items(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.PurchaseOrderItem VALUES v_purchase_order_items(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 20: Load Shipment

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_shipment(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_shipment IS TABLE OF dms_sample.Shipment%ROWTYPE INDEX BY PLS_INTEGER;
    v_shipments t_shipment;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_shipments(i).ShipmentID := NULL;
        v_shipments(i).PurchaseOrderID := TRUNC(dms_sample.random_number(1, 1000));
        v_shipments(i).ShipmentDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_shipments(i).TrackingNumber := dms_sample.random_string(20);
        v_shipments(i).CarrierName := dms_sample.random_string(20);
        v_shipments(i).EstimatedDeliveryDate := dms_sample.random_date(v_shipments(i).ShipmentDate, v_shipments(i).ShipmentDate + 30);
        v_shipments(i).ShipmentStatus := dms_sample.random_choice('Shipped,In Transit,Delivered');
        v_shipments(i).ShipmentRemarks := dms_sample.random_string(100);
        v_shipments(i).Weight := dms_sample.random_number(1, 100);
        v_shipments(i).Dimensions := dms_sample.random_string(20);
        v_shipments(i).Fragile := dms_sample.random_choice('Y,N');
        v_shipments(i).TemperatureControlRequired := dms_sample.random_choice('Y,N');
        v_shipments(i).SpecialHandlingInstructions := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Shipment VALUES v_shipments(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Shipment VALUES v_shipments(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 21: Load Inventory

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_inventory(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_inventory IS TABLE OF dms_sample.Inventory%ROWTYPE INDEX BY PLS_INTEGER;
    v_inventories t_inventory;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_inventories(i).InventoryID := NULL;
        v_inventories(i).ProductID := TRUNC(dms_sample.random_number(1, 1000));
        v_inventories(i).LocationID := TRUNC(dms_sample.random_number(1, 1000));
        v_inventories(i).QuantityOnHand := TRUNC(dms_sample.random_number(1, 1000));
        v_inventories(i).ReorderLevel := TRUNC(dms_sample.random_number(1, 100));
        v_inventories(i).LastUpdated := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_inventories(i).StockStatus := dms_sample.random_choice('In Stock,Out of Stock,Low Stock');
        v_inventories(i).InventoryRemarks := dms_sample.random_string(100);
        v_inventories(i).AverageCost := dms_sample.random_number(10, 1000);
        v_inventories(i).LastRestocked := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_inventories(i).StockTurnoverRate := dms_sample.random_number(0.1, 10);
        v_inventories(i).ShelfLocation := dms_sample.random_string(10);
        v_inventories(i).InventoryValue := v_inventories(i).QuantityOnHand * v_inventories(i).AverageCost;

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Inventory VALUES v_inventories(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Inventory VALUES v_inventories(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 22: StockMovement

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_stock_movement(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_stock_movement IS TABLE OF dms_sample.StockMovement%ROWTYPE INDEX BY PLS_INTEGER;
    v_stock_movements t_stock_movement;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_stock_movements(i).MovementID := NULL;
        v_stock_movements(i).InventoryID := TRUNC(dms_sample.random_number(1, 1000));
        v_stock_movements(i).MovementDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_stock_movements(i).Quantity := TRUNC(dms_sample.random_number(1, 100));
        v_stock_movements(i).MovementType := dms_sample.random_choice('Addition,Removal,Adjustment');
        v_stock_movements(i).ApprovedBy := dms_sample.random_string(20);
        v_stock_movements(i).MovementRemarks := dms_sample.random_string(100);
        v_stock_movements(i).MovementReference := dms_sample.random_string(20);
        v_stock_movements(i).ReasonForMovement := dms_sample.random_string(50);
        v_stock_movements(i).RecordedBy := dms_sample.random_string(20);
        v_stock_movements(i).VerificationStatus := dms_sample.random_choice('Verified,Unverified');
        v_stock_movements(i).MovementCost := dms_sample.random_number(10, 1000);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.StockMovement VALUES v_stock_movements(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.StockMovement VALUES v_stock_movements(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 23: Load CustomerOrder

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_customer_order(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_customer_order IS TABLE OF dms_sample.CustomerOrder%ROWTYPE INDEX BY PLS_INTEGER;
    v_customer_orders t_customer_order;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_customer_orders(i).CustomerOrderID := NULL;
        v_customer_orders(i).CustomerID := TRUNC(dms_sample.random_number(1, 1000));
        v_customer_orders(i).OrderDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_customer_orders(i).TotalAmount := dms_sample.random_number(100, 10000);
        v_customer_orders(i).ShippingAddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_customer_orders(i).BillingAddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_customer_orders(i).OrderStatus := dms_sample.random_choice('Pending,Shipped,Delivered,Canceled');
        v_customer_orders(i).PaymentStatus := dms_sample.random_choice('Paid,Unpaid');
        v_customer_orders(i).DeliveryDate := dms_sample.random_date(v_customer_orders(i).OrderDate, SYSDATE);
        v_customer_orders(i).OrderDetails := dms_sample.random_string(100);
        v_customer_orders(i).ShippingMethod := dms_sample.random_choice('Ground,Air,Express');
        v_customer_orders(i).TrackingNumber := dms_sample.random_string(15);
        v_customer_orders(i).IsGift := dms_sample.random_choice('Y,N');
        v_customer_orders(i).GiftMessage := dms_sample.random_string(50);
        v_customer_orders(i).DiscountCode := dms_sample.random_string(10);
        v_customer_orders(i).ReferralSource := dms_sample.random_string(20);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.CustomerOrder VALUES v_customer_orders(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.CustomerOrder VALUES v_customer_orders(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 24: Load CustomerOrderItem

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_customer_order_item(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_customer_order_item IS TABLE OF dms_sample.CustomerOrderItem%ROWTYPE INDEX BY PLS_INTEGER;
    v_customer_order_items t_customer_order_item;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_customer_order_items(i).CustomerOrderItemID := NULL;
        v_customer_order_items(i).CustomerOrderID := TRUNC(dms_sample.random_number(1, 1000));
        v_customer_order_items(i).ProductID := TRUNC(dms_sample.random_number(1, 1000));
        v_customer_order_items(i).Quantity := TRUNC(dms_sample.random_number(1, 100));
        v_customer_order_items(i).UnitPrice := dms_sample.random_number(10, 1000);
        v_customer_order_items(i).Discount := dms_sample.random_number(0, 50);
        v_customer_order_items(i).TotalPrice := (v_customer_order_items(i).Quantity * v_customer_order_items(i).UnitPrice) - v_customer_order_items(i).Discount;
        v_customer_order_items(i).DeliveryStatus := dms_sample.random_choice('Pending,Shipped,Delivered');
        v_customer_order_items(i).ItemCondition := dms_sample.random_choice('New,Used,Refurbished');
        v_customer_order_items(i).ReturnEligibility := dms_sample.random_choice('Y,N');
        v_customer_order_items(i).WarrantyStatus := dms_sample.random_choice('Valid,Expired');
        v_customer_order_items(i).ExpirationDate := dms_sample.random_date(DATE '2025-01-01', DATE '2030-01-01');
        v_customer_order_items(i).SpecialInstructions := dms_sample.random_string(50);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.CustomerOrderItem VALUES v_customer_order_items(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.CustomerOrderItem VALUES v_customer_order_items(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 25: Load ProductReturn

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_product_return(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_product_return IS TABLE OF dms_sample.ProductReturn%ROWTYPE INDEX BY PLS_INTEGER;
    v_product_returns t_product_return;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_product_returns(i).ReturnID := NULL;
        v_product_returns(i).CustomerOrderID := TRUNC(dms_sample.random_number(1, 1000));
        v_product_returns(i).ReturnDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_product_returns(i).ReturnReason := dms_sample.random_string(50);
        v_product_returns(i).RefundAmount := dms_sample.random_number(10, 1000);
        v_product_returns(i).ReturnStatus := dms_sample.random_choice('Pending,Approved,Rejected');
        v_product_returns(i).ReturnRemarks := dms_sample.random_string(100);
        v_product_returns(i).ConditionUponReturn := dms_sample.random_choice('Good,Fair,Poor');
        v_product_returns(i).ProcessingFee := dms_sample.random_number(0, 50);
        v_product_returns(i).RefundMethod := dms_sample.random_choice('Credit Card,Bank Transfer,Cash');
        v_product_returns(i).ApprovedBy := dms_sample.random_string(20);
        v_product_returns(i).RestockingFee := dms_sample.random_number(0, 50);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.ProductReturn VALUES v_product_returns(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.ProductReturn VALUES v_product_returns(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 26: Load Warranty

CREATE OR REPLACE PROCEDURE bulk_load_warranty(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_warranty IS TABLE OF dms_sample.Warranty%ROWTYPE INDEX BY PLS_INTEGER;
    v_warranties t_warranty;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        -- Populate the warranty record
        v_warranties(i).WarrantyID := NULL; -- Auto-generated by IDENTITY
        v_warranties(i).ProductID := TRUNC(dms_sample.random_number(1, 1000));
        v_warranties(i).WarrantyPeriod := dms_sample.random_choice('1 Year,2 Years,3 Years');
        v_warranties(i).WarrantyStartDate := dms_sample.random_date(DATE '2020-01-01', SYSDATE);
        v_warranties(i).WarrantyEndDate := ADD_MONTHS(v_warranties(i).WarrantyStartDate, 
                                                      CASE 
                                                          WHEN v_warranties(i).WarrantyPeriod = '1 Year' THEN 12
                                                          WHEN v_warranties(i).WarrantyPeriod = '2 Years' THEN 24
                                                          WHEN v_warranties(i).WarrantyPeriod = '3 Years' THEN 36
                                                      END);
        v_warranties(i).WarrantyStatus := dms_sample.random_choice('Active,Expired');
        v_warranties(i).WarrantyRemarks := dms_sample.random_string(100);
        v_warranties(i).ExtendedWarrantyAvailable := dms_sample.random_choice('Y,N');
        v_warranties(i).CoverageDetails := dms_sample.random_string(100);
        v_warranties(i).WarrantyProvider := dms_sample.random_string(50);
        v_warranties(i).ClaimLimit := ROUND(dms_sample.random_number(100, 10000), 2);
        v_warranties(i).WarrantyType := dms_sample.random_choice('Manufacturer,Extended');

        v_count := v_count + 1;

        -- Insert records in batches
        IF v_count = p_commit_interval THEN
            BEGIN
                FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                    INSERT /*+ APPEND */ INTO dms_sample.Warranty VALUES v_warranties(j);
                COMMIT;
                v_count := 0;
            EXCEPTION
                WHEN OTHERS THEN
                    FOR k IN 1 .. SQL%BULK_EXCEPTIONS.COUNT LOOP
                        DBMS_OUTPUT.PUT_LINE('Error at index ' || SQL%BULK_EXCEPTIONS(k).ERROR_INDEX || ': ' || SQLERRM(SQL%BULK_EXCEPTIONS(k).ERROR_CODE));
                    END LOOP;
                    ROLLBACK;
                    DBMS_OUTPUT.PUT_LINE('Error occurred during batch insert: ' || SQLERRM);
                    RETURN;
            END;
        END IF;
    END LOOP;

    -- Insert any remaining records
    IF v_count > 0 THEN
        BEGIN
            FORALL j IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Warranty VALUES v_warranties(j);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                FOR k IN 1 .. SQL%BULK_EXCEPTIONS.COUNT LOOP
                    DBMS_OUTPUT.PUT_LINE('Error at index ' || SQL%BULK_EXCEPTIONS(k).ERROR_INDEX || ': ' || SQLERRM(SQL%BULK_EXCEPTIONS(k).ERROR_CODE));
                END LOOP;
                ROLLBACK;
                DBMS_OUTPUT.PUT_LINE('Error occurred during final batch insert: ' || SQLERRM);
        END;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 27: Load ServiceRequest

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_service_request(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_service_request IS TABLE OF dms_sample.ServiceRequest%ROWTYPE INDEX BY PLS_INTEGER;
    v_service_requests t_service_request;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_service_requests(i).ServiceRequestID := NULL;
        v_service_requests(i).CustomerID := TRUNC(dms_sample.random_number(1, 1000));
        v_service_requests(i).ProductID := TRUNC(dms_sample.random_number(1, 1000));
        v_service_requests(i).RequestDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_service_requests(i).ServiceType := dms_sample.random_choice('Repair,Installation,Maintenance');
        v_service_requests(i).ServiceStatus := dms_sample.random_choice('Pending,In Progress,Completed');
        v_service_requests(i).ServiceDetails := dms_sample.random_string(100);
        v_service_requests(i).AssignedTechnicianID := TRUNC(dms_sample.random_number(1, 1000));
        v_service_requests(i).ExpectedCompletionDate := dms_sample.random_date(v_service_requests(i).RequestDate, v_service_requests(i).RequestDate + 30);
        v_service_requests(i).ServiceRemarks := dms_sample.random_string(100);
        v_service_requests(i).PriorityLevel := dms_sample.random_choice('Low,Medium,High');
        v_service_requests(i).ContactMethod := dms_sample.random_choice('Phone,Email,In-Person');
        v_service_requests(i).ServiceWarrantyStatus := dms_sample.random_choice('Valid,Expired');
        v_service_requests(i).FollowUpDate := dms_sample.random_date(v_service_requests(i).ExpectedCompletionDate, v_service_requests(i).ExpectedCompletionDate + 30);
        v_service_requests(i).PartsRequired := dms_sample.random_string(50);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.ServiceRequest VALUES v_service_requests(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.ServiceRequest VALUES v_service_requests(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 28: Load ServiceRequestAction

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_service_request_action(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_service_request_action IS TABLE OF dms_sample.ServiceRequestAction%ROWTYPE INDEX BY PLS_INTEGER;
    v_service_request_actions t_service_request_action;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_service_request_actions(i).ServiceRequestActionID := NULL;
        v_service_request_actions(i).ServiceRequestID := TRUNC(dms_sample.random_number(1, 1000));
        v_service_request_actions(i).ActionDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_service_request_actions(i).ActionType := dms_sample.random_choice('Repair,Maintenance,Inspection');
        v_service_request_actions(i).ActionDetails := dms_sample.random_string(100);
        v_service_request_actions(i).ActionTakenBy := dms_sample.random_string(20);
        v_service_request_actions(i).ActionStatus := dms_sample.random_choice('Completed,Pending,Failed');
        v_service_request_actions(i).ActionCost := dms_sample.random_number(100, 1000);
        v_service_request_actions(i).TimeSpent := dms_sample.random_number(0.5, 10);
        v_service_request_actions(i).AdditionalPartsRequired := dms_sample.random_string(50);
        v_service_request_actions(i).TechnicianComments := dms_sample.random_string(100);
        v_service_request_actions(i).NextSteps := dms_sample.random_string(50);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.ServiceRequestAction VALUES v_service_request_actions(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.ServiceRequestAction VALUES v_service_request_actions(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/


-- Table 29: ServiceAssignment

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_service_assignment(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_service_assignment IS TABLE OF dms_sample.ServiceAssignment%ROWTYPE INDEX BY PLS_INTEGER;
    v_service_assignments t_service_assignment;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_service_assignments(i).ServiceAssignmentID := NULL;
        v_service_assignments(i).ServiceRequestID := TRUNC(dms_sample.random_number(1, 1000));
        v_service_assignments(i).TechnicianID := TRUNC(dms_sample.random_number(1, 1000));
        v_service_assignments(i).AssignmentDate := dms_sample.random_date(DATE '2000-01-01', SYSDATE);
        v_service_assignments(i).CompletionDate := dms_sample.random_date(v_service_assignments(i).AssignmentDate, v_service_assignments(i).AssignmentDate + 30);
        v_service_assignments(i).AssignmentStatus := dms_sample.random_choice('Assigned,In Progress,Completed');
        v_service_assignments(i).AssignmentDetails := dms_sample.random_string(100);
        v_service_assignments(i).Priority := dms_sample.random_choice('Low,Medium,High');
        v_service_assignments(i).EstimatedHours := dms_sample.random_number(1, 20);
        v_service_assignments(i).ActualHours := dms_sample.random_number(1, 20);
        v_service_assignments(i).TaskDescription := dms_sample.random_string(50);
        v_service_assignments(i).CustomerFeedback := dms_sample.random_string(100);
        v_service_assignments(i).AssignmentDocument := EMPTY_CLOB();

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.ServiceAssignment VALUES v_service_assignments(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.ServiceAssignment VALUES v_service_assignments(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Table 30: Load Location

CREATE OR REPLACE PROCEDURE dms_sample.bulk_load_location(
    p_num_records IN NUMBER,
    p_commit_interval IN NUMBER
) IS
    TYPE t_location IS TABLE OF dms_sample.Location%ROWTYPE INDEX BY PLS_INTEGER;
    v_locations t_location;
    v_count NUMBER := 0;
BEGIN
    FOR i IN 1..p_num_records LOOP
        v_locations(i).LocationID := NULL;
        v_locations(i).LocationName := dms_sample.random_string(50);
        v_locations(i).AddressID := TRUNC(dms_sample.random_number(1, 1000));
        v_locations(i).LocationType := dms_sample.random_choice('Office,Warehouse,Store');
        v_locations(i).OperationalHours := dms_sample.random_string(50);
        v_locations(i).ContactNumber := dms_sample.random_string(15);
        v_locations(i).ManagerID := TRUNC(dms_sample.random_number(1, 1000));
        v_locations(i).ParkingAvailable := dms_sample.random_choice('Y,N');
        v_locations(i).FloorNumber := dms_sample.random_string(10);
        v_locations(i).BuildingName := dms_sample.random_string(50);
        v_locations(i).AccessCode := dms_sample.random_string(20);
        v_locations(i).SecurityLevel := dms_sample.random_choice('Low,Medium,High');
        v_locations(i).LocationDescription := dms_sample.random_string(100);

        v_count := v_count + 1;

        IF v_count = p_commit_interval THEN
            FORALL j IN i-p_commit_interval+1..i SAVE EXCEPTIONS
                INSERT /*+ APPEND */ INTO dms_sample.Location VALUES v_locations(j);
            COMMIT;
            v_count := 0;
        END IF;
    END LOOP;

    IF v_count > 0 THEN
        FORALL i IN p_num_records - v_count + 1..p_num_records SAVE EXCEPTIONS
            INSERT /*+ APPEND */ INTO dms_sample.Location VALUES v_locations(i);
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

-- Procedure for Data Load Employee_new_Data table

CREATE OR REPLACE PROCEDURE dms_sample.load_employee_new_data(
    p_num_records IN NUMBER,        -- Number of records to insert
    p_commit_interval IN NUMBER     -- Number of records after which commit should happen
) IS
    v_unique_code VARCHAR2(36);
BEGIN
  FOR i IN 1..p_num_records LOOP
    -- Generate a unique code
    v_unique_code := SYS_GUID();

    INSERT /*+ APPEND */ INTO dms_sample.employee_new_data (
      unique_code, first_name, last_name, date_of_birth, gender, hire_date, job_title, 
      department_id, department_name, manager_id, salary, bonus, email, phone_number, 
      address_line1, address_line2, city, state, zip_code, country, emergency_contact, 
      emergency_phone, ssn, marital_status, nationality, employment_status, 
      contract_type, contract_start_date, contract_end_date, education_level, 
      skills, certifications, languages_spoken, work_experience, previous_employer, 
      previous_job_title, previous_salary, reference_name, reference_phone, 
      reference_email, performance_score, last_promotion_date, next_review_date, 
      leave_balance, sick_leave_balance, vacation_balance, pension_plan, health_insurance, 
      dental_insurance, vision_insurance, life_insurance, stock_options, home_office, 
      remote_work, travel_percentage, relocation_status, security_clearance, background_check, 
      drug_test, work_shift, overtime_eligible, union_member, parking_spot, company_car, 
      expense_account, corporate_card, notes, created_at, updated_at, environment
    ) 
    VALUES (
      v_unique_code, -- unique_code
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)), -- first_name
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)), -- last_name
      TO_DATE('01-01-1970', 'DD-MM-YYYY') + TRUNC(DBMS_RANDOM.VALUE(0, 20000)), -- date_of_birth
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'M' ELSE 'F' END, -- gender
      SYSDATE - TRUNC(DBMS_RANDOM.VALUE(0, 3650)), -- hire_date
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 20)), -- job_title
      TRUNC(DBMS_RANDOM.VALUE(1, 1000)), -- department_id
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 20)), -- department_name
      TRUNC(DBMS_RANDOM.VALUE(1, 1000)), -- manager_id
      TRUNC(DBMS_RANDOM.VALUE(50000, 200000)), -- salary
      TRUNC(DBMS_RANDOM.VALUE(1000, 20000)), -- bonus
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)) || '@example.com', -- email
      TRUNC(DBMS_RANDOM.VALUE(1000000000, 9999999999)), -- phone_number
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 50)), -- address_line1
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 50)), -- address_line2
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- city
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(2, 2)), -- state
      TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(10000, 99999))), -- zip_code
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- country
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)), -- emergency_contact
      TRUNC(DBMS_RANDOM.VALUE(1000000000, 9999999999)), -- emergency_phone
      TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(100000000, 999999999))), -- ssn
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Single' ELSE 'Married' END, -- marital_status
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- nationality
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Full-time' ELSE 'Part-time' END, -- employment_status
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- contract_type
      SYSDATE - TRUNC(DBMS_RANDOM.VALUE(0, 3650)), -- contract_start_date
      SYSDATE + TRUNC(DBMS_RANDOM.VALUE(0, 3650)), -- contract_end_date
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- education_level
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 50)), -- skills
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 50)), -- certifications
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- languages_spoken
      TRUNC(DBMS_RANDOM.VALUE(1, 50)), -- work_experience
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 20)), -- previous_employer
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(10, 20)), -- previous_job_title
      TRUNC(DBMS_RANDOM.VALUE(50000, 200000)), -- previous_salary
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)), -- reference_name
      TRUNC(DBMS_RANDOM.VALUE(1000000000, 9999999999)), -- reference_phone
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)) || '@example.com', -- reference_email
      TRUNC(DBMS_RANDOM.VALUE(1, 5)), -- performance_score
      SYSDATE - TRUNC(DBMS_RANDOM.VALUE(0, 365)), -- last_promotion_date
      SYSDATE + TRUNC(DBMS_RANDOM.VALUE(0, 365)), -- next_review_date
      TRUNC(DBMS_RANDOM.VALUE(0, 30)), -- leave_balance
      TRUNC(DBMS_RANDOM.VALUE(0, 30)), -- sick_leave_balance
      TRUNC(DBMS_RANDOM.VALUE(0, 30)), -- vacation_balance
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- pension_plan
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- health_insurance
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- dental_insurance
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- vision_insurance
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- life_insurance
      TRUNC(DBMS_RANDOM.VALUE(0, 1000)), -- stock_options
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- home_office
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- remote_work
      TRUNC(DBMS_RANDOM.VALUE(0, 100)), -- travel_percentage
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- relocation_status
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- security_clearance
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- background_check
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- drug_test
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- work_shift
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- overtime_eligible
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- union_member
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 10)), -- parking_spot
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- company_car
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(5, 15)), -- expense_account
      CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'Y' ELSE 'N' END, -- corporate_card
      DBMS_RANDOM.STRING('U', DBMS_RANDOM.VALUE(20, 200)), -- notes
      SYSDATE, -- created_at
      SYSDATE, -- updated_at
      CASE TRUNC(DBMS_RANDOM.VALUE(1, 4))
        WHEN 1 THEN 'land'
        WHEN 2 THEN 'water'
        ELSE 'air'
      END -- environment
    );

    -- Commit every p_commit_interval records to avoid too much undo space usage
    IF MOD(i, p_commit_interval) = 0 THEN
      COMMIT;
    END IF;
  END LOOP;
  
  -- Final commit to save all records
  COMMIT;
END;
/

    -- Procedure for Table Load Bucket 1: ORDER, ORDERPRODUCT, INVOICE, CUSTOMERORDER, CUSTOMERORDERITEM

    CREATE OR REPLACE PROCEDURE dms_sample.load_data_80_to_100(
        p_max_num_records       IN NUMBER,
        p_max_commit_interval   IN NUMBER
    ) AS
        -- Declare a record type for holding procedure names
        TYPE t_table_list IS TABLE OF VARCHAR2(100);

        v_table_list            t_table_list := t_table_list('bulk_load_ORDER', 
                                                             'bulk_load_ORDER_PRODUCT', 
                                                             'bulk_load_INVOICE', 
                                                             'bulk_load_CUSTOMER_ORDER', 
                                                             'bulk_load_CUSTOMER_ORDER_ITEM');
        v_num_records           NUMBER;
        v_commit_interval       NUMBER;
        v_job_name              VARCHAR2(100);
        v_start_time            TIMESTAMP;
        v_job_exists            NUMBER;

        -- Helper function to get a random number within a specific range
        FUNCTION random_within_range(min_val IN NUMBER, max_val IN NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN GREATEST(1, TRUNC(DBMS_RANDOM.VALUE(min_val, max_val)));
        END;

    BEGIN
        -- Get the current timestamp for generating unique job names
        v_start_time := SYSTIMESTAMP;

        -- Calculate a random commit interval for all procedures
        v_commit_interval := random_within_range(1, p_max_commit_interval);

        -- Loop over each table in the list and create a job for each
        FOR i IN 1..v_table_list.COUNT LOOP
            -- Calculate random number of records for the current procedure (80-100% of max)
            v_num_records := random_within_range(p_max_num_records * 0.8, p_max_num_records);

            -- Generate a unique job name
            v_job_name := 'JOB_' || v_table_list(i) || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Check if the job is already running
            SELECT COUNT(*)
            INTO v_job_exists
            FROM user_scheduler_running_jobs
            WHERE job_name = v_job_name;

            IF v_job_exists = 0 THEN
                -- Create a job for the current procedure
                DBMS_SCHEDULER.CREATE_JOB(
                    job_name        => v_job_name,
                    job_type        => 'PLSQL_BLOCK',
                    job_action      => 'BEGIN ' || v_table_list(i) || '(' || v_num_records || ', ' || v_commit_interval || '); END;',
                    start_date      => SYSTIMESTAMP,
                    enabled         => TRUE
                );

                -- Execute the job
                DBMS_SCHEDULER.RUN_JOB(job_name => v_job_name, USE_CURRENT_SESSION => FALSE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('Job ' || v_job_name || ' is already running. Skipping creation.');
            END IF;
        END LOOP;
    END;
    /


    -- Procedure for Table Load Bucket 2: PRODUCT, INVENTORY, SHIPMENT, PAYMENT, PURCHASEORDER

    CREATE OR REPLACE PROCEDURE dms_sample.load_data_60_to_80(
        p_max_num_records       IN NUMBER,
        p_max_commit_interval   IN NUMBER
    ) AS
        -- Declare a record type for holding procedure names
        TYPE t_table_list IS TABLE OF VARCHAR2(100);

        v_table_list            t_table_list := t_table_list('BULK_LOAD_PRODUCT', 
                                                             'BULK_LOAD_INVENTORY', 
                                                             'BULK_LOAD_SHIPMENT', 
                                                             'BULK_LOAD_PAYMENT', 
                                                             'BULK_LOAD_PURCHASE_ORDER');
        v_num_records           NUMBER;
        v_commit_interval       NUMBER;
        v_job_name              VARCHAR2(100);
        v_start_time            TIMESTAMP;
        v_job_exists            NUMBER;

        -- Helper function to get a random number within a specific range
        FUNCTION random_within_range(min_val IN NUMBER, max_val IN NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN GREATEST(1, TRUNC(DBMS_RANDOM.VALUE(min_val, max_val)));
        END;

    BEGIN
        -- Get the current timestamp for generating unique job names
        v_start_time := SYSTIMESTAMP;

        -- Calculate a random commit interval for all procedures
        v_commit_interval := random_within_range(1, p_max_commit_interval);

        -- Loop over each table in the list and create a job for each
        FOR i IN 1..v_table_list.COUNT LOOP
            -- Calculate random number of records for the current procedure (60-80% of max)
            v_num_records := random_within_range(p_max_num_records * 0.6, p_max_num_records * 0.8);

            -- Generate a unique job name
            v_job_name := 'JOB_' || v_table_list(i) || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Check if the job is already running
            SELECT COUNT(*)
            INTO v_job_exists
            FROM user_scheduler_running_jobs
            WHERE job_name = v_job_name;

            IF v_job_exists = 0 THEN
                -- Create a job for the current procedure
                DBMS_SCHEDULER.CREATE_JOB(
                    job_name        => v_job_name,
                    job_type        => 'PLSQL_BLOCK',
                    job_action      => 'BEGIN ' || v_table_list(i) || '(' || v_num_records || ', ' || v_commit_interval || '); END;',
                    start_date      => SYSTIMESTAMP,
                    enabled         => TRUE
                );

                -- Execute the job
                DBMS_SCHEDULER.RUN_JOB(job_name => v_job_name, USE_CURRENT_SESSION => FALSE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('Job ' || v_job_name || ' is already running. Skipping creation.');
            END IF;
        END LOOP;
    END;
    /

    -- Procedure for Table Load Bucket 3: PURCHASEORDERITEM, STOCKMOVEMENT, WARRANTY, SERVICEREQUEST, EMPLOYEE

    CREATE OR REPLACE PROCEDURE dms_sample.load_data_50_to_60(
        p_max_num_records       IN NUMBER,
        p_max_commit_interval   IN NUMBER
    ) AS
        -- Declare a record type for holding procedure names
        TYPE t_table_list IS TABLE OF VARCHAR2(100);

        v_table_list            t_table_list := t_table_list('BULK_LOAD_PURCHASE_ORDER_ITEM', 
                                                             'BULK_LOAD_STOCK_MOVEMENT', 
                                                             'BULK_LOAD_WARRANTY', 
                                                             'BULK_LOAD_SERVICE_REQUEST', 
                                                             'BULK_LOAD_EMPLOYEE');
        v_num_records           NUMBER;
        v_commit_interval       NUMBER;
        v_job_name              VARCHAR2(100);
        v_start_time            TIMESTAMP;
        v_job_exists            NUMBER;

        -- Helper function to get a random number within a specific range
        FUNCTION random_within_range(min_val IN NUMBER, max_val IN NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN GREATEST(1, TRUNC(DBMS_RANDOM.VALUE(min_val, max_val)));
        END;

    BEGIN
        -- Get the current timestamp for generating unique job names
        v_start_time := SYSTIMESTAMP;

        -- Calculate a random commit interval for all procedures
        v_commit_interval := random_within_range(1, p_max_commit_interval);

        -- Loop over each table in the list and create a job for each
        FOR i IN 1..v_table_list.COUNT LOOP
            -- Calculate random number of records for the current procedure (50-60% of max)
            v_num_records := random_within_range(p_max_num_records * 0.5, p_max_num_records * 0.6);

            -- Generate a unique job name
            v_job_name := 'JOB_' || v_table_list(i) || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Check if the job is already running
            SELECT COUNT(*)
            INTO v_job_exists
            FROM user_scheduler_running_jobs
            WHERE job_name = v_job_name;

            IF v_job_exists = 0 THEN
                -- Create a job for the current procedure
                DBMS_SCHEDULER.CREATE_JOB(
                    job_name        => v_job_name,
                    job_type        => 'PLSQL_BLOCK',
                    job_action      => 'BEGIN ' || v_table_list(i) || '(' || v_num_records || ', ' || v_commit_interval || '); END;',
                    start_date      => SYSTIMESTAMP,
                    enabled         => TRUE
                );

                -- Execute the job
                DBMS_SCHEDULER.RUN_JOB(job_name => v_job_name, USE_CURRENT_SESSION => FALSE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('Job ' || v_job_name || ' is already running. Skipping creation.');
            END IF;
        END LOOP;
    END;
    /

    -- Procedure for Table Load Bucket 4: EXPENSE, SALARY, TIMESHEET, SERVICEASSIGNMENT, SERVICEREQUESTACTION

    CREATE OR REPLACE PROCEDURE dms_sample.load_data_40_to_50(
        p_max_num_records       IN NUMBER,
        p_max_commit_interval   IN NUMBER
    ) AS
        -- Declare a record type for holding procedure names
        TYPE t_table_list IS TABLE OF VARCHAR2(100);

        v_table_list            t_table_list := t_table_list('BULK_LOAD_EXPENSE', 
                                                             'BULK_LOAD_SALARY', 
                                                             'BULK_LOAD_TIMESHEET', 
                                                             'BULK_LOAD_SERVICE_ASSIGNMENT', 
                                                             'BULK_LOAD_SERVICE_REQUEST_ACTION');
        v_num_records           NUMBER;
        v_commit_interval       NUMBER;
        v_job_name              VARCHAR2(100);
        v_start_time            TIMESTAMP;
        v_job_exists            NUMBER;

        -- Helper function to get a random number within a specific range
        FUNCTION random_within_range(min_val IN NUMBER, max_val IN NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN GREATEST(1, TRUNC(DBMS_RANDOM.VALUE(min_val, max_val)));
        END;

    BEGIN
        -- Get the current timestamp for generating unique job names
        v_start_time := SYSTIMESTAMP;

        -- Calculate a random commit interval for all procedures
        v_commit_interval := random_within_range(1, p_max_commit_interval);

        -- Loop over each table in the list and create a job for each
        FOR i IN 1..v_table_list.COUNT LOOP
            -- Calculate random number of records for the current procedure (40-50% of max)
            v_num_records := random_within_range(p_max_num_records * 0.4, p_max_num_records * 0.5);

            -- Generate a unique job name
            v_job_name := 'JOB_' || v_table_list(i) || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Check if the job is already running
            SELECT COUNT(*)
            INTO v_job_exists
            FROM user_scheduler_running_jobs
            WHERE job_name = v_job_name;

            IF v_job_exists = 0 THEN
                -- Create a job for the current procedure
                DBMS_SCHEDULER.CREATE_JOB(
                    job_name        => v_job_name,
                    job_type        => 'PLSQL_BLOCK',
                    job_action      => 'BEGIN ' || v_table_list(i) || '(' || v_num_records || ', ' || v_commit_interval || '); END;',
                    start_date      => SYSTIMESTAMP,
                    enabled         => TRUE
                );

                -- Execute the job
                DBMS_SCHEDULER.RUN_JOB(job_name => v_job_name, USE_CURRENT_SESSION => FALSE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('Job ' || v_job_name || ' is already running. Skipping creation.');
            END IF;
        END LOOP;
    END;
    /


    -- Procedure for Table Load Bucket 5: CUSTOMER, VENDOR, DEPARTMENT, EMPLOYEEPROJECT, PROJECT

    CREATE OR REPLACE PROCEDURE dms_sample.load_data_20_to_40(
        p_max_num_records       IN NUMBER,
        p_max_commit_interval   IN NUMBER
    ) AS
        -- Declare a record type for holding procedure names
        TYPE t_table_list IS TABLE OF VARCHAR2(100);

        v_table_list            t_table_list := t_table_list('BULK_LOAD_CUSTOMER', 
                                                             'BULK_LOAD_VENDOR', 
                                                             'BULK_LOAD_DEPARTMENT', 
                                                             'BULK_LOAD_EMPLOYEE_PROJECT', 
                                                             'BULK_LOAD_PROJECT');
        v_num_records           NUMBER;
        v_commit_interval       NUMBER;
        v_job_name              VARCHAR2(100);
        v_start_time            TIMESTAMP;
        v_job_exists            NUMBER;

        -- Helper function to get a random number within a specific range
        FUNCTION random_within_range(min_val IN NUMBER, max_val IN NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN GREATEST(1, TRUNC(DBMS_RANDOM.VALUE(min_val, max_val)));
        END;

    BEGIN
        -- Get the current timestamp for generating unique job names
        v_start_time := SYSTIMESTAMP;

        -- Calculate a random commit interval for all procedures
        v_commit_interval := random_within_range(1, p_max_commit_interval);

        -- Loop over each table in the list and create a job for each
        FOR i IN 1..v_table_list.COUNT LOOP
            -- Calculate random number of records for the current procedure (20-40% of max)
            v_num_records := random_within_range(p_max_num_records * 0.2, p_max_num_records * 0.4);

            -- Generate a unique job name
            v_job_name := 'JOB_' || v_table_list(i) || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Check if the job is already running
            SELECT COUNT(*)
            INTO v_job_exists
            FROM user_scheduler_running_jobs
            WHERE job_name = v_job_name;

            IF v_job_exists = 0 THEN
                -- Create a job for the current procedure
                DBMS_SCHEDULER.CREATE_JOB(
                    job_name        => v_job_name,
                    job_type        => 'PLSQL_BLOCK',
                    job_action      => 'BEGIN ' || v_table_list(i) || '(' || v_num_records || ', ' || v_commit_interval || '); END;',
                    start_date      => SYSTIMESTAMP,
                    enabled         => TRUE
                );

                -- Execute the job
                DBMS_SCHEDULER.RUN_JOB(job_name => v_job_name, USE_CURRENT_SESSION => FALSE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('Job ' || v_job_name || ' is already running. Skipping creation.');
            END IF;
        END LOOP;
    END;
    /

    -- Procedure for Table Load Bucket 6: ADDRESS, CLIENT, LOCATION, PRODUCTRETURN, TECHNICIAN

    CREATE OR REPLACE PROCEDURE dms_sample.load_data_5_to_20(
        p_max_num_records       IN NUMBER,
        p_max_commit_interval   IN NUMBER
    ) AS
        -- Declare a record type for holding procedure names
        TYPE t_table_list IS TABLE OF VARCHAR2(100);

        v_table_list            t_table_list := t_table_list('BULK_LOAD_ADDRESS', 
                                                             'BULK_LOAD_CLIENT', 
                                                             'BULK_LOAD_LOCATION', 
                                                             'BULK_LOAD_PRODUCT_RETURN', 
                                                             'BULK_LOAD_TECHNICIAN');
        v_num_records           NUMBER;
        v_commit_interval       NUMBER;
        v_job_name              VARCHAR2(100);
        v_start_time            TIMESTAMP;
        v_job_exists            NUMBER;

        -- Helper function to get a random number within a specific range
        FUNCTION random_within_range(min_val IN NUMBER, max_val IN NUMBER) RETURN NUMBER IS
        BEGIN
            RETURN GREATEST(1, TRUNC(DBMS_RANDOM.VALUE(min_val, max_val)));
        END;

    BEGIN
        -- Get the current timestamp for generating unique job names
        v_start_time := SYSTIMESTAMP;

        -- Calculate a random commit interval for all procedures
        v_commit_interval := random_within_range(1, p_max_commit_interval);

        -- Loop over each table in the list and create a job for each
        FOR i IN 1..v_table_list.COUNT LOOP
            -- Calculate random number of records for the current procedure (5-20% of max)
            v_num_records := random_within_range(p_max_num_records * 0.05, p_max_num_records * 0.2);

            -- Generate a unique job name
            v_job_name := 'JOB_' || v_table_list(i) || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Check if the job is already running
            SELECT COUNT(*)
            INTO v_job_exists
            FROM user_scheduler_running_jobs
            WHERE job_name = v_job_name;

            IF v_job_exists = 0 THEN
                -- Create a job for the current procedure
                DBMS_SCHEDULER.CREATE_JOB(
                    job_name        => v_job_name,
                    job_type        => 'PLSQL_BLOCK',
                    job_action      => 'BEGIN ' || v_table_list(i) || '(' || v_num_records || ', ' || v_commit_interval || '); END;',
                    start_date      => SYSTIMESTAMP,
                    enabled         => TRUE
                );

                -- Execute the job
                DBMS_SCHEDULER.RUN_JOB(job_name => v_job_name, USE_CURRENT_SESSION => FALSE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('Job ' || v_job_name || ' is already running. Skipping creation.');
            END IF;
        END LOOP;
    END;
    /


-- Master Procedure to load all except together EMPLOYEE_NEW_DATA: 

CREATE OR REPLACE PROCEDURE master_parallel_load_multi_thread(
    p_max_num_records       IN NUMBER,
    p_max_commit_interval   IN NUMBER
) AS
    v_job_name           VARCHAR2(100);
    v_start_time         TIMESTAMP := SYSTIMESTAMP;
    v_num_threads        NUMBER := 2;  -- Maximum of 2 threads per procedure
    v_records_per_thread NUMBER;
    v_total_procedures   NUMBER := 6;  -- Number of different procedures
    v_proc_records       NUMBER;       -- Records each procedure will handle
BEGIN
    -- Calculate the number of records each procedure will handle
    v_proc_records := CEIL(p_max_num_records / (v_total_procedures * v_num_threads));

    FOR i IN 1..v_num_threads LOOP
        FOR proc_name IN (
            SELECT 'dms_sample.load_data_80_to_100' proc_name FROM dual UNION ALL
            SELECT 'dms_sample.load_data_60_to_80' proc_name FROM dual UNION ALL
            SELECT 'dms_sample.load_data_50_to_60' proc_name FROM dual UNION ALL
            SELECT 'dms_sample.load_data_40_to_50' proc_name FROM dual UNION ALL
            SELECT 'dms_sample.load_data_20_to_40' proc_name FROM dual UNION ALL
            SELECT 'dms_sample.load_data_5_to_20' proc_name FROM dual
        ) 
        LOOP
            -- Generate unique job name
            v_job_name := 'JOB_' || SUBSTR(proc_name.proc_name, INSTR(proc_name.proc_name, '.') + 1) || '_THREAD_' || i || '_' || TO_CHAR(v_start_time, 'YYYYMMDDHH24MISSFF3');

            -- Create and run the job
            DBMS_SCHEDULER.CREATE_JOB(
                job_name        => v_job_name,
                job_type        => 'PLSQL_BLOCK',
                job_action      => 'BEGIN ' || proc_name.proc_name || '(' || v_proc_records || ', ' || p_max_commit_interval || '); END;',
                start_date      => SYSTIMESTAMP,
                enabled         => TRUE
            );
        END LOOP;
    END LOOP;

    -- Optionally, you can monitor or wait for jobs to finish if needed
END;
/


-- Master Procedure to Table EMPLOYEE_NEW_DATA

    CREATE OR REPLACE PROCEDURE dms_sample.parallel_load_employee_new_data(
        p_num_records IN NUMBER,         -- Total number of records to insert
        p_commit_interval IN NUMBER      -- Number of records after which commit should happen
        ) IS
        v_threads NUMBER;
        v_range_size NUMBER;
        v_job_name VARCHAR2(100);        -- Increased length to accommodate unique names
        v_unique_suffix VARCHAR2(20);    -- To hold the unique timestamp identifier
    BEGIN
        -- Generate a unique suffix using the current timestamp
        v_unique_suffix := TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3');

        -- Determine the number of threads based on the total number of records
        IF p_num_records <= 1000000 THEN
             v_threads := 20;  -- Minimum 20 threads for 1 million records
        ELSIF p_num_records <= 20000000 THEN
            v_threads := 40;  -- Minimum 40 threads for 20 million records
        ELSE
           v_threads := LEAST(CEIL(p_num_records / 1000000), 100);  -- Up to 100 threads for larger datasets
        END IF;

        -- Calculate the number of records each thread should process
        v_range_size := CEIL(p_num_records / v_threads);

        FOR i IN 1..v_threads LOOP
            DECLARE
                v_job_name VARCHAR2(100) := 'load_employee_new_data_' || v_unique_suffix || '_' || TO_CHAR(i);
            BEGIN
                -- Debugging output to confirm the job name and creation
                DBMS_OUTPUT.PUT_LINE('Creating job: ' || v_job_name || ' for range size: ' || v_range_size);

                -- Drop the job if it already exists (very unlikely due to unique names)
                BEGIN
                    DBMS_SCHEDULER.drop_job(v_job_name, force => TRUE);
                EXCEPTION
                    WHEN OTHERS THEN NULL; -- Ignore if job doesn't exist
                END;

                -- Create the job for parallel execution
                BEGIN
                    DBMS_SCHEDULER.create_job (
                        job_name        => v_job_name,
                        job_type        => 'PLSQL_BLOCK',
                        job_action      => 'BEGIN dms_sample.load_employee_new_data(' || v_range_size || ', ' || p_commit_interval || '); END;',
                        start_date      => SYSTIMESTAMP,
                        enabled         => FALSE  -- Create the job but do not enable it immediately
                    );

                    -- If job creation was successful, enable the job
                    DBMS_SCHEDULER.enable(v_job_name);
                    DBMS_OUTPUT.PUT_LINE('Successfully created and enabled job: ' || v_job_name);

                EXCEPTION
                    WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('Failed to create or enable job: ' || v_job_name || ' - Error: ' || SQLERRM);
                END;   
            END;
        END LOOP;
    END;
    /

-- Master Procedure to Load all Tables


CREATE OR REPLACE PROCEDURE master_load_all(
    p_num_records IN NUMBER,         -- Total number of records to insert
    p_commit_interval IN NUMBER      -- Number of records after which commit should happen
) AS
    v_adjusted_employee_records NUMBER;
BEGIN
    -- Calculate the adjusted number of records for the EMPLOYEE_NEW_DATA table
    v_adjusted_employee_records := p_num_records * 10;

    -- Call the master procedure to load all other tables except EMPLOYEE_NEW_DATA
    master_parallel_load_multi_thread(
        p_max_num_records     => p_num_records,
        p_max_commit_interval => p_commit_interval
    );

    -- Call the master procedure to load the EMPLOYEE_NEW_DATA table
    dms_sample.parallel_load_employee_new_data(
        p_num_records     => v_adjusted_employee_records,
        p_commit_interval => p_commit_interval
    );

END;
/

-- Procedures Created --


    BEGIN
        master_load_all(
            p_num_records => 50000000,         -- Total number of records to load
            p_commit_interval => 30000         -- Number of records after which to commit
        );
    END;
    /

